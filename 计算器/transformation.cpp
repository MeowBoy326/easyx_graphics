#include <easyx.h>
#include <cstring>
#include <iostream>
#include <algorithm>
#include "loadimage.h"
#include "transparent.h"
#include "transformation.h"

using namespace std;

MyChar Tra[1000], TraEd[1000];                                     // 分别存放输入单位的数与输出单位的数
int ReTra(-1);                                                     // 输入数据位数
int Tranumber(0), Tranumber1(0);                                   // 标记转换的单位
int WhatChange(1);                                                 // 标记是哪个转换
int A[1000] = { 0 }, B[1000] = { 0 };                              // 存储字符串转换为数字
int C[1000] = { 0 };                                               // 存储计算结果
int software[3] = { 0 };                                           // 判断选择的是哪个功能（科学计算还是普通计算？...)
int fly(600), fly1(0);                                             // 上下滑动控制变量
bool xs = false;                                                   // 判断是否可以按小数点(一个数字中只有一个小数点)
bool Button[4] = { false };                                        // 判断是否已经开始选择转换单位      
bool Button1[30] = { false };                                      // 控制转换时要转换的单位         
bool button[20][20] = { false };                                   // 屏幕按键标志
bool help[10] = { false };                                         // 是否打开功能选项
float H(0);                                                        // 色相


/*--------------------------------------各种转换的单位--------------------------------*/

// 数据 13
MyChar TraS[][40] = { _T("位"), _T("B"), _T("KB"), _T("MB"), _T("GB"), _T("TB"), _T("PB"), _T("EB"), _T("ZB"), _T("YB"), _T("BB"), _T("NB"), _T("DB") };

// 长度 27
MyChar TraC[][40] = { _T("弗隆 fur"), _T("英寻 ftm"), _T("码 yd"), _T("海里 n mile"), _T("英寸 in"), _T("英尺 ft"), _T("英里 mile"),
                      _T("毫 hao"), _T("厘 lii"), _T("分 fen"), _T("寸 cun"), _T("尺 chi"), _T("丈 zhang"), _T("里 li"), _T("公里 gongli"),
	                  _T("皮米 pm"), _T("纳米 nm"), _T("微米 μm"), _T("毫米 mm"), _T("厘米 nm"), _T("分米 dm"), _T("米 m"), _T("千米 km"),
	                  _T("秒差距 pc"), _T("月球距离 ld"), _T("天文单位 ⊙"), _T("光年 ly") };

// 面积 19
MyChar TraM[][40] = { _T("平方千米 km²"), _T("公顷 ha"), _T("公亩 a"), _T("平方米 m²"), _T("平方分米 dm²"), _T("平方厘米 cm²"), _T("平方毫米 mm²"), _T("平方微米 μm²"),
                      _T("平方英里 mile²"), _T("平方码 yd²"), _T("平方竿 rd²"), _T("平方英尺 ft²"), _T("平方英寸 in²"), _T("英亩 ac"),
	                  _T("平方公里 gongli²"), _T("顷 qing"), _T("亩 mu"), _T("平方尺 chi²"), _T("平方寸 cun²") };

// 体积 15
MyChar TraT[][40] = { _T("立方米 m³"), _T("立方分米 dm³"), _T("立方厘米 cm³"), _T("立方毫米 mm³"), _T("公石 hl"), _T("升 l"), _T("分升 dl"), _T("厘升 cl"), _T("毫升 ml"),
                      _T("立方英尺 ft³"), _T("立方英寸 in³"), _T("立方码 yd³"), _T("亩英尺 af³"), _T("加仑(美制) gal"), _T("加仑(英制) gal")};

// 时间 11
MyChar TraSH[][40] = { _T("年 y"), _T("月 m"), _T("周 wk"), _T("天 d"), _T("小时 h"), _T("分钟 min"), _T("秒 s"), _T("毫秒 ms"), _T("微秒 μs"),
                       _T("纳秒 ns"), _T("皮秒 ps") };

// 温度 5
MyChar TraW[][40] = { _T("摄氏度 ℃"), _T("华氏度 ℉"), _T("开尔文 K"), _T("兰氏度 °R"), _T("列式度 °Re" )};

// 速度 9
MyChar TraSD[][40] = { _T("英寸/秒 ips"), _T("英尺/秒 fps"), _T("米/秒 m/s"), _T("千米/小时 km/h"),
                       _T("千米/秒 km/s"), _T("海里/小时 kn"), _T("英里/小时 mph"), _T("马赫 Ma"), _T("光速 c") };

// 重量 21
MyChar TraZ[][40] = { _T("吨 t"), _T("千克 kg"), _T("克 g"), _T("毫克 mg"), _T("微克 μg"), _T("公担 q"), _T("磅 lb"), _T("盎司 oz"), _T("克拉 ct"),
                      _T("格令 gr"), _T("短吨(美制) sh.t"), _T("长吨(美制) l.t"), _T("英担 cwt"), _T("美担 cwt"), _T("英石 st"),
	                  _T("打兰 dr"), _T("担 dan"), _T("斤 jin"), _T("钱 qian"), _T("两 liang"), _T("斤(台湾) jin(tw)") };

// 能量 7
MyChar TraN[][40] = { _T("电子伏特 eV"), _T("焦耳 J"), _T("千焦耳 KJ"), _T("热卡路里 cal"), _T("食物卡路里 fcal"), _T("英尺·磅 ft·lb"), _T("英国热量单位 btu" )};

// 功率 10
MyChar TraG[][40] = { _T("瓦 W"), _T("千瓦 kW"), _T("英制马力 hp"), _T("米制马力 ps"), _T("公斤·米/秒 kg·m/s"), _T("千卡/秒 kcal/s"), _T("英国热量单位/秒 Btu/s"), _T("英尺·磅/秒 ft·lb/s"),
                      _T("焦耳/秒 J/s"), _T("牛顿·米/秒 N·m/s" ) };

// 压力 14
MyChar TraY[][40] = { _T("帕斯卡 Pa"), _T("兆帕 MPa"), _T("千帕 kPa"), _T("百帕 hPa"), _T("标准大气压 atm"), _T("毫米汞柱 mmHg"), _T("英寸汞柱 inHg"), _T("巴 bar"), _T("毫巴 mbar"),
                      _T("磅力/平方英尺 psf"), _T("磅力/平方英寸 psi"), _T("毫米水柱 mmH₂O"), _T("公斤力/平方厘米 kgf/cm²"), _T("公斤力/平方米 kgf/m²") };

// 角度 8
MyChar TraJ[][40] = { _T("圆周 φ"), _T("直角 Rt∟"), _T("百分度 gon"), _T("度 °"), _T("分 ′"), _T("秒 ″"), _T("弧度 rad"), _T("毫弧度 mrad") };



// 初始化
void MemStr()
{
	memset(Tra, 0, sizeof(Tra));
	memset(TraEd, 0, sizeof(TraEd));
	memset(Button, 0, sizeof(Button));
	memset(Button1, 0, sizeof(Button1));
	xs = false;
	Tranumber = 0;
	Tranumber1 = 0;
	ReTra = -1;
}


// 乘法
void bignumber(MyChar *s4, MyChar *s5)
{
	int alen = (int)_tcslen(s4), blen = (int)_tcslen(s5);
	bool fu1 = false, fu2 = false;		// 判断是否为负数
	if (s4[0] == '-')
	{
		fu1 = true;
		for (int i = 0; i < alen; i++)	// 去掉负号
			s4[i] = s4[i + 1];
	}
	if (s5[0] == '-')
	{
		fu2 = true;
		for (int i = 0; i < blen; i++)	// 去掉负号
			s5[i] = s5[i + 1];
	}

	int lena = 0, lenb = 0;				// 记录小数位数
	MyChar *p = NULL, *q = NULL;
	p = _tcschr(s4,L'.');				// 判断是否是小数
	q = _tcschr(s5,L'.');				// 判断是否是小数
	alen = (int)_tcslen(s4), blen = (int)_tcslen(s5);
	if (p - s4 >= 1)
	{
		lena = alen - (int)(p - s4 + 1);			// 如果有小数
		for (int i = (int)(p - s4); i < alen; i++)	// 去掉小数点
			s4[i] = s4[i + 1];
	}
	if (q - s5 >= 1)
	{
		lenb = blen - (int)(q - s5 + 1);			// 如果有小数
		for (int i = (int)(q - s5); i < blen; i++)	// 去掉小数点
			s5[i] = s5[i + 1];
	}

	int a[1000] = { 0 }, b[1000] = { 0 }, c[1000] = { 0 };
	alen = (int)_tcslen(s4);
	blen = (int)_tcslen(s5);
	int sum = max(alen, blen);
	for (int i = 0; i < sum; i++)
	{
		if (alen > i)a[i] = s4[alen - i - 1] - '0';
		if (blen > i)b[i] = s5[blen - i - 1] - '0';
	}
	for (int i = 0; i < alen; i++)
		for (int j = 0; j < blen; j++)
			c[i + j] += a[i] * b[j];
	for (int k = 0; k < alen + blen; k++)
		c[k + 1] += c[k] / 10, c[k] %= 10;
	int flag(0), j(0), n(0);
	if (_tcslen(TraEd) > 0)memset(TraEd, 0, sizeof(TraEd));
	if (!fu1&&fu2 || fu1 && !fu2)TraEd[j++] = '-';	// 如果是一正一负，结果为负数
	for (int k = alen + blen - 1; k >= 0; k--)
	{
		if (c[k] || k == lena + lenb)flag = 1;		// 如果前面没有零或者是出现小数点，flag 为真
		if (flag == 1)
		{
			if (k + 1 == lena + lenb)TraEd[j++] = '.';
			TraEd[j++] = c[k] + '0';
		}
	}
}


// 高精度加法
MyChar *NumberAdd(MyChar *ss, MyChar *ss1)
{
	memset(C, 0, sizeof(C));
	
	int alen = (int)_tcslen(ss), blen = (int)_tcslen(ss1);
	int max = alen > blen ? alen : blen;
	for (int i = 0; i <= max; i++)
	{
		if (alen > i&&blen > i)C[i] = ss[alen - 1 - i] - '0' + ss1[blen - 1 - i] - '0';
		if (alen <= i && blen > i)C[i] = ss1[blen - 1 - i] - '0';
		if (alen > i&&blen <= i)C[i] = ss[alen - 1 - i] - '0';
	}
	for (int i = 0; i <= max; i++)
		C[i + 1] += C[i] / 10, C[i] %= 10;
	int flag(0),j(0), n(0);
	memset(TraEd, 0, sizeof(TraEd));
	for (int i = max; i >= 0; i--)
	{
		if (C[i] != 0)flag = 1;
		if (flag == 1)
		{
			n++;
			if (n % 43 == 0)TraEd[j++] = '\n';
			TraEd[j++] = C[i] + '0';
		}
	}
	if (!flag)TraEd[j++] = 0 + '0';
	return TraEd;
}


// 高精度加法
MyChar *NumberAddx(MyChar *ss, MyChar *ss1)
{
	memset(TraEd, 0, sizeof(TraEd));
	memset(C, 0, sizeof(C));

	int alen = (int)_tcslen(ss), blen = (int)_tcslen(ss1);
	int max = alen > blen ? alen : blen;
	for (int i = 0; i <= max; i++)
	{
		if (alen > i&&blen > i)C[i] = ss[i] - '0' + ss1[i] - '0';
		if (alen <= i && blen > i)C[i] = ss1[i] - '0';
		if (alen > i&&blen <= i)C[i] = ss[i] - '0';
	}
	for (int i = max; i > 0; i--)
		C[i - 1] += C[i] / 10, C[i] %= 10;

	int j(0), n(0);
	if (C[0] >= 10)
	{
		TraEd[j++] = '.';
		C[0] %= 10;
	}
	for (int i = 0; i < max; i++)
	{
		n++;
		if (n % 43 == 0)TraEd[j++] = '\n';
		TraEd[j++] = C[i] + '0';
	}
	return TraEd;
}


MyChar *NumberSubx(MyChar *ss, MyChar *ss1)
{
	memset(A, 0, sizeof(A));
	memset(B, 0, sizeof(B));
	memset(C, 0, sizeof(C));
	memset(TraEd, 0, sizeof(TraEd));
	int alen = (int)_tcslen(ss), blen = (int)_tcslen(ss1);
	int sum = max(alen, blen);
	for (int i = 0; i < sum; i++)
	{
		if (alen > i)A[i] = ss[i] - '0';
		if (blen > i)B[i] = ss1[i] - '0';
	}
	int f(0);
	if (_tcscmp(ss, ss1) < 0)f = -1;
	if (f == -1)for (int i = 0; i < sum; i++)C[i] = B[i] - A[i];
	else for (int i = 0; i < sum; i++)C[i] = A[i] - B[i];

	for (int i = sum - 1; i >= 0; i--)
		if (C[i] < 0) C[i] += 10, C[i - 1]--;

	int flag(0), n(0), j(0);
	if (f == -1)TraEd[j++] = '-';		// 如果是一正一负，结果为负数
	for (int i = 0; i < sum; i++)
	{
		n++;
		if (n % 43 == 0)TraEd[j++] = '\n';
		TraEd[j++] = C[i] + '0';
	}
	return TraEd;
}

MyChar *NumberSub(MyChar *ss, MyChar *ss1)
{
	memset(A, 0, sizeof(A));
	memset(B, 0, sizeof(B));
	memset(C, 0, sizeof(C));
	memset(TraEd, 0, sizeof(TraEd));
	int alen = (int)_tcslen(ss), blen = (int)_tcslen(ss1);
	int sum = max(alen, blen);
	for (int i = 0; i < sum; i++)
	{
		if (alen > i)A[i] = ss[alen - 1 - i] - '0';
		if (blen > i)B[i] = ss1[blen - 1 - i] - '0';
	}
	int f(0);
	if (alen < blen || (alen == blen && _tcscmp(ss, ss1) < 0))f = -1;
	if (f == -1)for (int i = 0; i < sum; i++)C[i] = B[i] - A[i];
	else for (int i = 0; i < sum; i++)C[i] = A[i] - B[i];

	for (int i = 0; i < sum; i++)
		if (C[i] < 0) C[i] += 10, C[i + 1]--;
	int flag(0), n(0), j(0);

	if (f == -1)TraEd[j++] = '-';		// 如果是一正一负，结果为负数
	for (int i = sum; i >= 0; i--)
	{
		if (C[i])flag = 1;
		if (flag == 1) {
			n++;
			if (n % 43 == 0)TraEd[j++] = '\n';
			TraEd[j++] = C[i] + '0';
		}
	}
	if (!flag)TraEd[j++] = 0 + '0';
	return TraEd;
}

//整数部分加减一
void LsJJ(MyChar *s4, bool t)
{
	int ls[1000] = { 0 };
	int g = (int)_tcslen(s4);
	for (int i = 0; i < g; i++)
		ls[i] = s4[i] - '0';
	memset(s4, 0, sizeof(s4));
	
	if (!t)
	{
		ls[g - 1]--;
		for (int i = g - 1; i > 0; i--)
		{
			if (ls[i] < 0) 
			{
				ls[i] += 10;
				ls[i - 1]--;
			}
		}
		bool flag(false);
		int m = 0;
		for (int i = 0; i < g; i++)
		{
			if (ls[i])flag = true;
			if (flag)s4[m++] = ls[i] + '0';
		}
		s4[m] = '\0';
	}
	else
	{
		ls[g - 1]++;
		for (int i = g - 1; i > 0; i--)
		{
			if (ls[i] > 9)
			{
				ls[i] -= 10;
				ls[i - 1]++;
			}
		}
		if (ls[0] > 9)
		{
			ls[0] -= 10;
			s4[0] = '1';
			int m;
			for (m = 1; m<= g; m++)
			{
				s4[m] = ls[m - 1] + '0';
			}
			s4[m] = '\0';
		}
	}
	
}

// 加法
void bignumberadd(MyChar *s4, MyChar *s5)
{
	int alen = (int)_tcslen(s4), blen = (int)_tcslen(s5);
	bool fu = false, fu1 = false, fu2 = false;	// 判断是否为负数
	if (s4[0] == '-')
	{
		fu1 = true;
		for (int i = 0; i < alen; i++)			// 去掉负号
			s4[i] = s4[i + 1];
	}
	if (s5[0] == '-')
	{
		fu2 = true;
		for (int i = 0; i < blen; i++)			// 去掉负号
			s5[i] = s5[i + 1];
	}

	int lena = 0, lenb = 0;						// 记录小数位数
	MyChar *p = NULL, *q = NULL;
	p = _tcschr(s4, '.');						// 判断是否是小数
	q = _tcschr(s5, '.');
	alen = (int)_tcslen(s4), blen = (int)_tcslen(s5);
	MyChar s7[10000] = { '0' }, s8[10000] = { '0' };
	if (p - s4 >= 1)
	{
		lena = alen - (int)(p - s4 + 1);		// 如果有小数,计算小数的位数
		int m = 0;
		for (int i = (int)(p - s4 + 1); i < alen; i++) // 小数部分
			s7[m++] = s4[i];
		s7[m] = '\0';
		s4[p - s4] = '\0';						// 整数部分
	}
	if (q - s5 >= 1)
	{
		lenb = blen - (int)(q - s5 + 1); 		// 如果有小数
		int m = 0;
		for (int i = (int)(q - s5 + 1); i < blen; i++) 	// 小数部分
			s8[m++] = s5[i];
		s8[m] = '\0';
		s5[q - s5] = '\0';						// 整数部分
	}
    #pragma warning(disable:4996)
	if (fu1 && !fu2)	// 如果第一个数是负数，第二个数是正数
	{
		if (p - s4 >= 1 || q - s5 >= 1) {		// 有小数
			if (_tcslen(s5) > _tcslen(s4) || _tcslen(s5) == _tcslen(s4) && _tcscmp(s5, s4) > 0 ||
				_tcscmp(s4, s5) == 0 && _tcscmp(s8, s7) > 0)	// 正数比负数大
			{
				_tcscpy(s4, NumberSub(s5, s4));
				_tcscpy(s5, NumberSubx(s8, s7));
			}
			else
			{
				fu = true;
				_tcscpy(s4,  NumberSub(s4, s5));
				_tcscpy(s5,  NumberSubx(s7, s8));
			}

			if (s5[0] == '-')
			{
				LsJJ(s4, false);           //整数部分减一或加一
				B[0] = 1, A[0] = 0;
				int k = (int)_tcslen(s5);
				for (int i = 1; i < k; i++)// 转换为数字
				{	
					A[i] = s5[i] - '0';
					B[i] = 0;
				}
				for (int i = 0; i < k; i++)	// 按位数减
					C[i] = B[i] - A[i];

				for (int i = k - 1; i > 0; i--)	// 借位
					if (C[i] < 0)C[i] += 10, C[i - 1]--;

				if (fu)
				{
					_tcscpy(TraEd, _T("-"));
					_tcscat(TraEd, s4);
					memset(s4, 0, sizeof(s4));
					for (int i = 1; i < k; i++)
						s4[i - 1] = C[i] + '0';
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s4);	               // 小数部分
				}
				else
				{
					_tcscpy(TraEd, s4);	                   // 整数部分
					memset(s4, 0, sizeof(s4));
					for (int i = 1; i < k; i++)
						s4[i - 1] = C[i] + '0';
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s4);	               // 小数部分
				}
			}
			else
			{
				if (fu)
				{
					_tcscpy(TraEd,  _T("-"));
					_tcscat(TraEd,  s4);
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);	               // 小数部分
				}
				else
				{
					_tcscpy(TraEd,  s4);	// 整数部分
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);	// 小数部分
				}
			}
		}
		else
			NumberSub(s5, s4);
	}
	else  if (!fu1 && fu2)
	{	// 如果二个数是负数，第一个数是正数
		if (p - s4 >= 1 || q - s5 >= 1) {	// 有小数
			if (_tcslen(s4) > _tcslen(s5) || _tcslen(s5) == _tcslen(s4) && _tcscmp(s4, s5) > 0 ||
				_tcscmp(s4, s5) == 0 && _tcscmp(s7, s8) > 0)	// 正数比负数大
			{
				_tcscpy(s4,  NumberSub(s4, s5));
				_tcscpy(s5,  NumberSubx(s7, s8));
			}
			else
			{
				fu = true;
				_tcscpy(s4,  NumberSub(s5, s4));
				_tcscpy(s5,  NumberSubx(s8, s7));
			}
			if (s5[0] == '-')
			{
				LsJJ(s4, false);            //整数部分减一或加一
				B[0] = 1, A[0] = 0;
				int k = (int)_tcslen(s5);
				for (int i = 1; i < k; i++)	// 转换为数字
				{
					A[i] = s5[i] - '0';
					B[i] = 0;
				}
				for (int i = 0; i < k; i++)	// 按位数减
					C[i] = B[i] - A[i];

				for (int i = k - 1; i > 0; i--)	// 借位
					if (C[i] < 0)C[i] += 10, C[i - 1]--;

				if (fu)
				{
					_tcscpy(TraEd, _T("-"));
					_tcscat(TraEd, s4);
					memset(s4, 0, sizeof(s4));
					for (int i = 1; i < k; i++)
						s4[i - 1] = C[i] + '0';
					_tcscat(TraEd, _T("."));
					_tcscat(TraEd, s4); 	// 小数部分
				}
				else
				{
					_tcscpy(TraEd,  s4);	// 整数部分
					memset(s4, 0, sizeof(s4));
					for (int i = 1; i < k; i++)
						s4[i - 1] = C[i] + '0';
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s4);	// 小数部分
				}
			}
			else
			{
				if (fu)
				{
					_tcscpy(TraEd,  _T("-"));
					_tcscat(TraEd,  s4);
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);	// 小数部分
				}
				else
				{
					_tcscpy(TraEd,  s4);	// 整数部分
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);	// 小数部分
				}
			}
		}
		else
			NumberSub(s4, s5);
	}
	else	// 两个数同正或同负
	{
		if (p - s4 >= 1 || q - s5 >= 1)	// 有小数
		{
			_tcscpy(s4, NumberAdd(s4, s5));
			_tcscpy(s5, NumberAddx(s7, s8));
			if (s5[0] == '.') {
				LsJJ(s4, true);           //整数部分减一或加一
				int ls[1000] = { 0 };
				int i;
				for (i = 0; i < (int)_tcslen(s4); i++)
					ls[i] = s4[i] - '0';
				ls[--i]++;
				for (; i >= 0; i--)
				{
					if (ls[i] > 9)
						ls[i] -= 10;
					ls[i - 1]++;
				}
				if (fu1&&fu2)	// 同为负数
				{
					_tcscpy(TraEd,  _T("-"));
					_tcscat(TraEd,  s4);
					_tcscat(TraEd,  s5);
				}
				else
				{
					_tcscpy(TraEd,  s4);
					_tcscat(TraEd,  s5);
				}
			}
			else
			{
				if (fu1&&fu2)
				{
					_tcscpy(TraEd,  _T("-"));
					_tcscat(TraEd,  s4);
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);
				}
				else
				{
					_tcscpy(TraEd,  s4);
					_tcscat(TraEd,  _T("."));
					_tcscat(TraEd,  s5);
				}
			}
		}
		else	// 没有小数
		{
			if (fu1 && fu2)	// 同为负
			{
				_tcscpy(s4,  NumberAdd(s4, s5));
				_tcscpy(TraEd,  _T("-"));
				_tcscat(TraEd, s4);
			}
			else
				NumberAdd(s4, s5);
		}
	}
}

// 特殊输出
void BlStr()
{	
	MyChar sStr[1000] = { 0 };
	MyChar s[10] = { 0 };
	_tcscpy(sStr, TraEd);
	memset(TraEd, 0, sizeof(TraEd));
    #pragma warning(disable:4996)
	int k = (int)_tcslen(sStr);
    
	if (k > 30)
	{
		int t = 0;	// 标记不是零的第一个数
		for (int i = 0; i < k; i++) {
			if (sStr[i] != '0'&&sStr[i] != '.')
			{
				t = i;
				break;
			}
		}
		MyChar *p = _tcschr(sStr, '.');
		if (p - sStr >= 1)
		{
			if ((p - sStr) - t > 0)
				_stprintf(s, _T("%d"), (int)((p - sStr) - t - 1));
			else
				_stprintf(s, _T("%d"), (int)((p - sStr) - t));
			int j = t;
			for (int i = 0; i < 30; j++)
			{
				if (i == 1)TraEd[i++] = '.';
				if (sStr[j] != '.')
					TraEd[i++] = sStr[j];
			}
			_tcscat(TraEd, _T("e"));
			_tcscat(TraEd, s);
			_tcscat(TraEd, _T("\0"));
		}
		else
		{
			_stprintf(s, _T("%d"), (int)_tcslen(sStr) - 1);
			for (int i = 0, j = t; i < 30; i++, j++)
			{
				if (i == 1)TraEd[i++] = '.';
				if (sStr[j] != '.')
					TraEd[i] = sStr[j];
			}
			_tcscat(TraEd,  _T("e"));
			_tcscat(TraEd, s);
			_tcscat(TraEd,  _T("\0"));
		}
	}
}


// 数据转换
void Transform()
{
	memset(TraEd, 0, sizeof(TraEd));
	if (Tranumber > Tranumber1)	// 如果输入的单位大于输入的单位
	{
		if (Tranumber1 != 0)	// 如果输出的单位不是“位”的话
		{
			_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
			for (int i = 0; i < Tranumber - Tranumber1; i++)
			{
				MyChar Str[] = { _T("1024") };
				bignumber(TraEd, Str);
			}
			if (_tcslen(TraEd) > 30)BlStr();
		}
		if (Tranumber1 == 0)	// 如果输出的单位是“位”的话
		{
			_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
			for (int i = 0; i < Tranumber - Tranumber1 - 1; i++)
			{
				MyChar Str[] = { _T("1024") };
				bignumber(TraEd, Str);
			}
			MyChar Str[] = { _T("8") };
			bignumber(TraEd, Str);
			if (_tcslen(TraEd) > 30)BlStr();
		}
	}
	else  if (Tranumber == Tranumber1)	// 输入等于输出的单位时
	{
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	}
	else	// 输入的单位小于输出的
	{
		if (Tranumber != 0)	// 如果输入的单位不是“位”的话
		{
			_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
			for (int i = 0; i < Tranumber1 - Tranumber; i++)
			{
				MyChar Str[] = { _T("0.0009765625") };
				bignumber(TraEd, Str);
			}
			if (_tcslen(TraEd) > 30)BlStr();
		}
		if (Tranumber == 0)	// 如果输入的单位是“位”的话
		{
			_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
			for (int i = 0; i < Tranumber1 - Tranumber - 1; i++)
			{
				MyChar Str[] = { _T("0.0009765625") };
				bignumber(TraEd, Str);
			}
			MyChar Str[] = { _T("0.125") };
			bignumber(TraEd, Str);
			if (_tcslen(TraEd) > 30)BlStr();
		}
	}
}	// 数据转换


// 长度转换
void Transform1()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][27][40] = {
		{_T("1"),_T("0.909090909090909090909090909"),_T("0.004545454545454545454545455"),_T("9.20623558"),_T("0.000126262626262626262626263"),
		 _T("0.001515151515151515151515152"),_T("8"),_T("0.000000165698985"),_T("0.00000165698985"),_T("0.0000165698985"),_T("0.000165698985"),
		 _T("0.00165698985"),_T("0.0165698985"),_T("2.48548477"),_T("4.97096954"),_T("0.00000000000000497096954"),_T("0.00000000000497096954"),
		 _T("0.00000000497096954"),_T("0.00000497096954"),_T("0.0000497096954"),_T("0.000497096954"),_T("0.00497096954"),_T("4.97096954"),
		 _T("153388093000000"),_T("1910845.66"),_T("734646458"),_T("47029003000000")
		},	// 弗隆
		{_T("110"),_T("1"),_T("0.5"),_T("1012.68591"),_T("0.013888888888888888888888889"),
		 _T("0.016666666666666666666666667"),_T("880"),_T("0.0000182268883"),_T("0.000182268883"),_T("0.00182268883"),_T("0.0182268883"),
		 _T("0.182268883"),_T("1.82268883"),_T("273.403325"),_T("546.806649"),_T("0.000000000000546806649"),_T("0.000000000546806649"),
		 _T("0.000000546806649"),_T("0.000546806649"),_T("0.00546806649"),_T("0.0546806649"),_T("0.546806649"),_T("546.806649"),
		 _T("16872692000000000"),_T("210193023"),_T("81801110400"),_T("5173190330000000")
		},	// 英寻
		{_T("220"),_T("2"),_T("1"),_T("2025.37183"),_T("0.277777777777777777777777778"),
		 _T("0.333333333333333333333333333"),_T("1760"),_T("0.0000364537766"),_T("0.000364537766"),_T("0.00364537766"),_T("0.0364537766"),
		 _T("0.364537766"),_T("3.64537766"),_T("564.806649"),_T("1093.6133"),_T("0.0000000000010936133"),_T("0.0000000010936133"),
		 _T("0.0000010936133"),_T("0.0010936133"),_T("0.010936133"),_T("0.10936133"),_T("1.0936133"),_T("1093.6133"),
		 _T("33745380000000000"),_T("420386045"),_T("163602221000"),_T("10346380700000000")
		},	// 码
		{_T("0.10862203"),_T("0.000987473002"),_T("0.000493736501"),_T("1"),_T("0.0000137149028"),
		 _T("0.000164578834"),_T("0.868976242"),_T("0.0000000179985601"),_T("0.000000179985601"),_T("0.00000179985601"),_T("0.0000179985601"),
		 _T("0.000179985601"),_T("0.00179985601"),_T("0.269978402"),_T("0.539956803"),_T("0.000000000000000539956803"),_T("0.000000000000539956803"),
		 _T("0.000000000539956803"),_T("0.000000539956803"),_T("0.00000539956803"),_T("0.0000539956803"),_T("0.000539956803"),_T("0.539956803"),
		 _T("16661326000000"),_T("207559.935"),_T("80776388.1"),_T("5108385780000")
		},	// 海里
		{_T("7920"),_T("72"),_T("36"),_T("72913.3858"),_T("1"),
		 _T("12"),_T("63360"),_T("0.00131233596"),_T("0.0131233596"),_T("0.131233596"),_T("1.31233596"),
		 _T("13.1233596"),_T("131.233596"),_T("19685.0394"),_T("39370.0787"),_T("0.0000000000393700787"),_T("0.0000000393700787"),
		 _T("0.0000393700787"),_T("0.0393700787"),_T("0.393700787"),_T("3.93700787"),_T("39.3700787"),_T("39370.0787"),
		 _T("1214833690000000000"),_T("15133897600"),_T("5889679950000"),_T("372469704000000000")
		},	// 英寸
		{_T("660"),_T("6"),_T("3"),_T("6076.11549"),_T("0.833333333333333333333333333"),
		 _T("1"),_T("5280"),_T("0.00010936133"),_T("0.0010936133"),_T("0.010936133"),_T("0.10936133"),
		 _T("1.0936133"),_T("10.936133"),_T("1640.41995"),_T("3280.8399"),_T("0.0000000000032808399"),_T("0.0000000032808399"),
		 _T("0.0000032808399"),_T("0.0032808399"),_T("0.032808399"),_T("0.32808399"),_T("3.2808399"),_T("3280.8399"),
		 _T("101236141000000000"),_T("1261158140"),_T("490806662000"),_T("31039142000000000")
		},	// 英尺
		{_T("0.125"),_T("0.001136363636363636363636364"),_T("0.000568181818181818181818182"),_T("1.15077945"),_T("0.000015782828282828282828283"),
		 _T("0.000189393939393939393939394"),_T("1"),_T("0.0000000207123731"),_T("0.000000207123731"),_T("0.00000207123731"),_T("0.0000207123731"),
		 _T("0.000207123731"),_T("0.00207123731"),_T("0.310685596"),_T("0.621371192"),_T("0.000000000000000621371192"),_T("0.000000000000621371192"),
		 _T("0.000000000621371192"),_T("0.000000621371192"),_T("0.00000621371192"),_T("0.0000621371192"),_T("0.000621371192"),_T("0.621371192"),
		 _T("19173511600000"),_T("238855.708"),_T("92955807.3"),_T("5878625370000")
		},	// 英里
		{_T("6035040"),_T("54864"),_T("27432"),_T("55560000"),_T("762"),
		 _T("9144"),_T("48280320"),_T("1"),_T("10"),_T("100"),_T("1000"),
		 _T("10000"),_T("100000"),_T("15000000"),_T("30000000"),_T("0.00000003"),_T("0.00003"),
		 _T("0.03"),_T("30"),_T("300"),_T("3000"),_T("30000"),_T("30000000"),
		 _T("925703274000000000000"),_T("11532030000000"),_T("4487936120000000"),_T("283821914000000000000")
		},	// 毫
		{_T("603504"),_T("5486.4"),_T("2743.2"),_T("5556000"),_T("76.2"),
		 _T("914.4"),_T("4828032"),_T("0.1"),_T("1"),_T("10"),_T("100"),_T("1000"),_T("10000"),_T("1500000"),_T("3000000"),_T("0.000000003"),_T("0.000003"),
		 _T("0.003"),_T("3"),_T("30"),_T("300"),_T("3000"),_T("3000000"),
		 _T("92570327400000000000"),_T("1153203000000"),_T("448793612000000"),_T("28382191400000000000")
		},	// 厘
		{_T("60350.4"),_T("548.64"),_T("274.32"),_T("555600"),_T("7.62"),
		 _T("91.44"),_T("482803.2"),_T("0.01"),_T("0.1"),_T("1"),_T("10"),
		 _T("100"),_T("1000"),_T("150000"),_T("300000"),_T("0.0000000003"),_T("0.0000003"),
		 _T("0.0003"),_T("0.3"),_T("3"),_T("30"),_T("300"),_T("300000"),
		 _T("9257032740000000000"),_T("115320300000"),_T("44879361200000"),_T("2838219140000000000")
		},	// 分
		{_T("6035.04"),_T("54.864"),_T("27.432"),_T("55560"),_T("0.762"),
		 _T("9.144"),_T("48280.32"),_T("0.001"),_T("0.01"),_T("0.1"),_T("1"),
		 _T("10"),_T("100"),_T("15000"),_T("30000"),_T("0.00000000003"),_T("0.00000003"),
		 _T("0.00003"),_T("0.03"),_T("0.3"),_T("3"),_T("30"),_T("30000"),
		 _T("925703274000000000"),_T("11532030000"),_T("4487936120000"),_T("283821914000000000")
		},	// 寸
		{_T("603.504"),_T("5.4864"),_T("2.7432"),_T("5556"),_T("0.0762"),
		 _T("0.9144"),_T("4828.032"),_T("0.0001"),_T("0.001"),_T("0.01"),_T("0.1"),
		 _T("1"),_T("10"),_T("1500"),_T("3000"),_T("0.000000000003"),_T("0.000000003"),
		 _T("0.000003"),_T("0.003"),_T("0.03"),_T("0.3"),_T("3"),_T("3000"),
		 _T("92570327400000000"),_T("1153203000"),_T("448793612000"),_T("28382191400000000")
		},	// 尺
		{_T("60.3504"),_T("0.54864"),_T("0.27432"),_T("555.6"),_T("0.00762"),
		 _T("0.09144"),_T("482.8032"),_T("0.00001"),_T("0.0001"),_T("0.001"),_T("0.01"),
		 _T("0.1"),_T("1"),_T("150"),_T("300"),_T("0.0000000000003"),_T("0.0000000003"),
		 _T("0.0000003"),_T("0.0003"),_T("0.003"),_T("0.03"),_T("0.3"),_T("300"),
		 _T("9257032740000000"),_T("115320300"),_T("44879361200"),_T("2838219140000000")
		},	// 丈
		{_T("0.402336"),_T("0.0036576"),_T("0.0018288"),_T("3.704"),_T("0.0000508"),
		 _T("0.0006096"),_T("3.218688"),_T("0.000000066666666666666666667"),_T("0.00000066666666666666666667"),_T("0.0000066666666666666666667"),_T("0.000066666666666666666667"),
		 _T("0.00066666666666666666667"),_T("0.0066666666666666666667"),_T("1"),_T("2"),_T("0.000000000000002"),_T("0.000000000002"),
		 _T("0.000000002"),_T("0.000002"),_T("0.00002"),_T("0.0002"),_T("0.002"),_T("2"),
		 _T("61713551600000"),_T("768802"),_T("299195741"),_T("18921460900000")
		},	// 里
		{_T("0.201168"),_T("0.0018288"),_T("0.0009144"),_T("1.852"),_T("0.0000254"),
		 _T("0.0003048"),_T("1.609344"),_T("0.000000033333333333333333333"),_T("0.00000033333333333333333333"),_T("0.0000033333333333333333333"),_T("0.000033333333333333333333"),
		 _T("0.00033333333333333333333"),_T("0.0033333333333333333333"),_T("0.5"),_T("1"),_T("0.000000000000001"),_T("0.000000000001"),
		 _T("0.000000001"),_T("0.000001"),_T("0.00001"),_T("0.0001"),_T("0.001"),_T("1"),
		 _T("30856775800000"),_T("384401"),_T("149597871"),_T("9460730470000")
		},	// 公里
		{_T("201168000000000"),_T("1828800000000"),_T("914400000000"),_T("1852000000000000"),_T("25400000000"),
		 _T("304800000000"),_T("1609344000000000"),_T("33333333.3333333333"),_T("333333333.333333333"),_T("3333333333.33333333"),_T("33333333333.3333333"),
		 _T("333333333333.333333"),_T("3333333333333.33333"),_T("500000000000000"),_T("1000000000000000"),_T("1"),_T("1000"),
		 _T("1000000"),_T("1000000000"),_T("10000000000"),_T("100000000000"),_T("1000000000000"),_T("1000000000000000"),
		 _T("30867758000000000000000000000"),_T("384401000000000000000"),_T("149597871000000000000000"),_T("9460730470000000000000000000")
		},	// 皮米
		{_T("201168000000"),_T("1828800000"),_T("914400000"),_T("1852000000000"),_T("25400000"),
		 _T("304800000"),_T("1609344000000"),_T("33333.3333333333333"),_T("333333.333333333333"),_T("3333333.33333333333"),_T("33333333.3333333333"),
		 _T("333333333.333333333"),_T("3333333333.33333333"),_T("500000000000"),_T("1000000000000"),_T("0.001"),_T("1"),
		 _T("1000"),_T("1000000"),_T("10000000"),_T("100000000"),_T("1000000000"),_T("1000000000000"),
		 _T("30867758000000000000000000"),_T("384401000000000000"),_T("149597871000000000000"),_T("9460730470000000000000000")
		},	// 纳米
		{_T("201168000"),_T("1828800"),_T("914400"),_T("1852000000"),_T("25400"),
		 _T("304800"),_T("1609344000"),_T("33.3333333333333333"),_T("333.333333333333333"),_T("3333.33333333333333"),_T("33333.3333333333333"),
	     _T("333333.333333333333"),_T("3333333.33333333333"),_T("500000000"),_T("1000000000"),_T("0.000001"),_T("0.001"),
		 _T("1"),_T("1000"),_T("10000"),_T("100000"),_T("1000000"),_T("1000000000"),
	     _T("30867758000000000000000"),_T("384401000000000"),_T("149597871000000000"),_T("9460730470000000000000")
		},	// 微米
		{_T("201168"),_T("1828.8"),_T("914.4"),_T("1852000"),_T("25.4"),
		 _T("304.8"),_T("1609344"),_T("0.0333333333333333333"),_T("0.333333333333333333"),_T("3.3333333333333333"),_T("33.333333333333333"),
		 _T("333.33333333333333"),_T("3333.3333333333333"),_T("500000"),_T("1000000"),_T("0.000000001"),_T("0.000001"),
		 _T("0.001"),_T("1"),_T("10"),_T("100"),_T("1000"),_T("1000000"),
	     _T("30867758000000000000"),_T("384401000000"),_T("149597871000000"),_T("9460730470000000000")
		},	// 毫米
		{_T("20116.8"),_T("182.88"),_T("91.44"),_T("185200"),_T("2.54"),
	     _T("30.48"),_T("160934.4"),_T("0.00333333333333333333"),_T("0.0333333333333333333"),_T("0.33333333333333333"),_T("3.3333333333333333"),
	     _T("33.333333333333333"),_T("333.33333333333333"),_T("50000"),_T("100000"),_T("0.0000000001"),_T("0.0000001"),
		 _T("0.0001"),_T("0.1"),_T("1"),_T("10"),_T("100"),_T("100000"),
		 _T("3086775800000000000"),_T("38440100000"),_T("14959787100000"),_T("946073047000000000")
		},	// 厘米
		{_T("2011.68"),_T("18.288"),_T("9.144"),_T("18520"),_T("0.254"),
		 _T("3.048"),_T("16093.44"),_T("0.000333333333333333333"),_T("0.00333333333333333333"),_T("0.033333333333333333"),_T("0.33333333333333333"),
		 _T("3.3333333333333333"),_T("33.333333333333333"),_T("5000"),_T("10000"),_T("0.00000000001"),_T("0.00000001"),
		 _T("0.00001"),_T("0.01"),_T("0.1"),_T("1"),_T("10"),_T("10000"),
	     _T("308677580000000000"),_T("3844010000"),_T("1495978710000"),_T("94607304700000000")
		},	// 分米
		{_T("201.168"),_T("1.8288"),_T("0.9144"),_T("1852"),_T("0.0254"),
		 _T("0.3048"),_T("1609.344"),_T("0.0000333333333333333333"),_T("0.000333333333333333333"),_T("0.0033333333333333333"),_T("0.033333333333333333"),
		 _T("0.33333333333333333"),_T("3.3333333333333333"),_T("500"),_T("1000"),_T("0.000000000001"),_T("0.000000001"),
		 _T("0.000001"),_T("0.001"),_T("0.01"),_T("0.1"),_T("1"),_T("1000"),
	     _T("30867758000000000"),_T("384401000"),_T("149597871000"),_T("9460730470000000")
		},	// 米
		{_T("0.201168"),_T("0.0018288"),_T("0.0009144"),_T("1.852"),_T("0.0000254"),
		 _T("0.0003048"),_T("1.609344"),_T("0.0000000333333333333333333"),_T("0.000000333333333333333333"),_T("0.0000033333333333333333"),_T("0.000033333333333333333"),
		 _T("0.00033333333333333333"),_T("0.0033333333333333333"),_T("0.5"),_T("1"),_T("0.000000000000001"),_T("0.000000000001"),
		 _T("0.000000001"),_T("0.000001"),_T("0.00001"),_T("0.0001"),_T("0.001"),_T("1"),
		 _T("30867758000000"),_T("384401"),_T("149597871"),_T("9460730470000")
		},	// 千米
		{_T("0.00000000000000651941088"),_T("0.0000000000000000592673716"),_T("0.0000000000000000296336858"),_T("0.0000000000000600192324"),_T("0.00000000000000000082315794"),
		 _T("0.00000000000000000987789527"),_T("0.000000000000052155287"),_T("0.0000000000000000000108025976"),_T("0.000000000000000000108025976"),_T("0.00000000000000000108025976"),_T("0.0000000000000000108025976"),
		 _T("0.000000000000000108025976"),_T("0.00000000000000108025976"),_T("0.0000000000000162038964"),_T("0.0000000000000324077929"),_T("0.0000000000000000000000000000324077929"),_T("0.0000000000000000000000000324077929"),
		 _T("0.0000000000000000000000324077929"),_T("0.0000000000000000000324077929"),_T("0.000000000000000000324077929"),_T("0.00000000000000000324077929"),_T("0.0000000000000000324077929"),_T("0.0000000000000324077929"),
		 _T("1"),_T("0.000000012457588"),_T("0.00000484813681"),_T("0.306601394")
		},	// 秒差距
		{_T("0.000000523328503"),_T("0.00000000475753185"),_T("0.00000000237876592"),_T("0.00000481788549"),_T("0.0000000000660768312"),
		 _T("0.000000000792921975"),_T("0.00000418662803"),_T("0.0000000000000867150016"),_T("0.000000000000867150016"),_T("0.00000000000867150016"),_T("0.0000000000867150016"),
		 _T("0.000000000867150016"),_T("0.00000000867150016"),_T("0.00000130072502"),_T("0.00000260145005"),_T("0.00000000000000000000260145005"),_T("0.00000000000000000260145005"),
		 _T("0.00000000000000260145005"),_T("0.00000000000260145005"),_T("0.0000000000260145005"),_T("0.000000000260145005"),_T("0.00000000260145005"),_T("0.00000260145005"),
		 _T("80272360.9"),_T("1"),_T("389.171388"),_T("24611617.7")
		},	// 月球距离
		{_T("0.00000000134472502"),_T("0.0000000000122247729"),_T("0.00000000000611238646"),_T("0.0000000123798554"),_T("0.000000000000169788513"),
		 _T("0.00000000000203746215"),_T("0.0000000107578002"),_T("0.000000000000000222819571"),_T("0.00000000000000222819571"),_T("0.0000000000000222819571"),_T("0.000000000000222819571"),
		 _T("0.00000000000222819571"),_T("0.0000000000222819571"),_T("0.00000000334229356"),_T("0.00000000668458712"),_T("0.00000000000000000000000668458712"),_T("0.00000000000000000000668458712"),
	     _T("0.00000000000000000668458712"),_T("0.00000000000000668458712"),_T("0.0000000000000668458712"),_T("0.000000000000668458712"),_T("0.00000000000668458712"),_T("0.00000000668458712"),
	     _T("206264.806"),_T("0.00256956197"),_T("1"),_T("63241.0071")
		},	// 天文单位
		{ _T("0.0000000000000212634744"),_T("0.000000000000000193304313"),_T("0.0000000000000000966521563"),_T("0.000000000000195756554"),_T("0.00000000000000000268478212"),
		  _T("0.0000000000000000322173854"),_T("0.000000000000170107795"),_T("0.00000000000000000000352333611"),_T("0.0000000000000000000352333611"),_T("0.000000000000000000352333611"),_T("0.00000000000000000352333611"),
		  _T("0.0000000000000000352333611"),_T("0.000000000000000352333611"),_T("0.0000000000000528500417"),_T("0.000000000000105700083"),_T("0.000000000000000000000000000105700083"),_T("0.000000000000000000000000105700083"),
		  _T("0.000000000000000000000105700083"),_T("0.000000000000000000105700083"),_T("0.00000000000000000105700083"),_T("0.0000000000000000105700083"),_T("0.000000000000000105700083"),_T("0.000000000000105700083"),
		  _T("3.26156378"),_T("0.0000000406312178"),_T("0.0000158125074"),_T("1")
		 }	// 光年
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}	// 长度转换


// 面积转换
void Transform2()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	
	MyChar Str[][19][30] = {
		{_T("1"),_T("0.01"),_T("0.0001"),_T("0.000001"),_T("0.00000001"),_T("0.0000000001"),_T("0.000000000001"),_T("0.000000000000000001"),
		 _T("2.58998811"),_T("0.00000083612736"),_T("0.0000252928526"),_T("0.00000009290304"),_T("0.00000000064516"),_T("0.004046856"),
		 _T("1"),_T("0.666666666666666666666666667"),_T("0.00066666666666666666666667"),_T("0.000000111111111111111111111"),
		 _T("0.0000000011111111111111111")},	// 平方千米
		{_T("100"),_T("1"),_T("0.01"),_T("0.0001"),_T("0.000001"),_T("0.00000001"),_T("0.0000000001"),_T("0.0000000000000001"),
		 _T("258.998811"),_T("0.000083612736"),_T("0.00252928526"),_T("0.000009290304"),_T("0.000000064516"),_T("0.4046856"),
		 _T("0.01"),_T("66.66666666666666666666666667"),_T("0.06666666666666666666666667"),_T("0.000011111111111111111111111"),
		 _T("0.0000001111111111111111111")},	// 公顷
		{_T("10000"),_T("100"),_T("1"),_T("0.01"),_T("0.0001"),_T("0.000001"),_T("0.00000001"),_T("0.00000000000001"),
		 _T("25899.8811"),_T("0.0083612736"),_T("0.252928526"),_T("0.0009290304"),_T("0.0000064516"),_T("40.46856"),
		 _T("1"),_T("6666.666666666666666666666667"),_T("6.6666666666666666666666667"),_T("0.001111111111111111111111111"),
		 _T("0.0000111111111111111111111")},	// 公亩
		{_T("1000000"),_T("10000"),_T("100"),_T("1"),_T("0.01"),_T("0.0001"),_T("0.000001"),_T("0.000000000001"),
		 _T("2589988.11"),_T("0.83612736"),_T("25.2928526"),_T("0.09290304"),_T("0.00064516"),_T("4046.856"),
		 _T("100"),_T("666666.6666666666666666666667"),_T("666.66666666666666666666667"),_T("0.11111111111111111111111111"),
		 _T("0.0011111111111111111111111")},	// 平方米
	    {_T("100000000"),_T("1000000"),_T("10000"),_T("100"),_T("1"),_T("0.01"),_T("0.0001"),_T("0.0000000001"),
		 _T("258998811"),_T("83.612736"),_T("2529.28526"),_T("9.290304"),_T("0.064516"),_T("404685.6"),
		 _T("10000"),_T("66666666.66666666666666666667"),_T("66666.666666666666666666667"),_T("11.111111111111111111111111"),
		 _T("0.11111111111111111111111")},	// 平方分米
		{_T("10000000000"),_T("100000000"),_T("1000000"),_T("10000"),_T("100"),_T("1"),_T("0.01"),_T("0.00000001"),
		 _T("25899881100"),_T("8361.2736"),_T("252928.526"),_T("929.0304"),_T("6.4516"),_T("40468560"),
		 _T("1000000"),_T("6666666666.666666666666666667"),_T("6666666.6666666666666666667"),_T("1111.1111111111111111111111"),
		 _T("11.111111111111111111111")},	// 平方厘米
		{_T("1000000000000"),_T("10000000000"),_T("100000000"),_T("1000000"),_T("10000"),_T("100"),_T("1"),_T("0.000001"),
		 _T("2589988110000"),_T("836127.36"),_T("25292852.6"),_T("92903.04"),_T("645.16"),_T("4046850000"),
		 _T("100000000"),_T("666666666666.6666666666666667"),_T("666666666.66666666666666667"),_T("111111.11111111111111111111"),
		 _T("1111.1111111111111111111")},	// 平方毫米
		{_T("1000000000000000000"),_T("10000000000000000"),_T("100000000000000"),_T("1000000000000"),_T("10000000000"),_T("100000000"),_T("1000000"),_T("1"),
		 _T("2589988110000000000"),_T("836127360000"),_T("25292852600000"),_T("92903040000"),_T("645160000"),_T("4046850000000000"),
		 _T("100000000000000"),_T("666666666666666666.6666666667"),_T("666666666666666.66666666667"),_T("111111111111.11111111111111"),
		 _T("1111111111.1111111111111")},	// 平方微米
		{_T("0.386102159"),_T("0.00386102159"),_T("0.0000386102159"),_T("0.000000386102159"),_T("0.00000000386102159"),_T("0.0000000000386102159"),_T("0.000000000000386102159"),_T("0.000000000000000000386102159"),
		 _T("1"),_T("0.000000322830579"),_T("0.000009765625"),_T("0.0000000358700463"),_T("0.000000000249097669"),_T("0.00156249984"),
		 _T("0.386102159"),_T("0.0257401439"),_T("0.000257401439"),_T("0.0000000429002398"),
		 _T("0.000000000429002398")},	// 平方英里
		{_T("1195990.05"),_T("11959.9005"),_T("119.599005"),_T("1.19599005"),_T("0.0119599005"),_T("0.000119599005"),_T("0.00000119599005"),_T("0.00000000000119599005"),
		 _T("3097600"),_T("1"),_T("30.25"),_T("0.1111111111111111111111"),_T("0.000771604938"),_T("483939949"),
		 _T("1195990.05"),_T("79732.6698"),_T("797.326698"),_T("0.132887783"),
		 _T("0.00132887783")},	// 平方码
		{_T("39536.861"),_T("395.36861"),_T("3.9536861"),_T("0.039536861"),_T("0.00039536861"),_T("0.0000039536861"),_T("0.000000039536861"),_T("0.000000000000039536861"),
		 _T("102400"),_T("0.0330578512"),_T("1"),_T("0.00367309458"),_T("0.0000255076013"),_T("159.999983"),
		 _T("39536.861"),_T("2635.79074"),_T("26.3579074"),_T("0.00439298456"),
		 _T("0.0000439298456")},	// 平方竿
		{_T("10763910.4"),_T("107639.104"),_T("1076.39104"),_T("10.7639104"),_T("0.107639104"),_T("0.00107639104"),_T("0.0000107639104"),_T("0.0000000000107639104"),
		 _T("27878400"),_T("9"),_T("272.25"),_T("1"),_T("0.006944444444444444444"),_T("43559.9955"),
		 _T("10763910.4"),_T("717594.028"),_T("7175.94028"),_T("1.19599005"),
		 _T("0.0119599005")},	// 平方英尺
		{_T("1550003100"),_T("15500031"),_T("155000.31"),_T("1550.0031"),_T("15.500031"),_T("0.15500031"),_T("0.0015500031"),_T("0.0000000015500031"),
		 _T("4014489600"),_T("1296"),_T("39204"),_T("144"),_T("1"),_T("6272639.35"),
		 _T("1550003100"),_T("103333540"),_T("1033335.4"),_T("172.222567"),
		 _T("1.72222567")},	// 平方英寸
		{_T("247.105407"),_T("2.47105407"),_T("0.0247105407"),_T("0.000247105407"),_T("0.00000247105407"),_T("0.0000000247105407"),_T("0.000000000247105407"),_T("0.000000000000000247105407"),
		 _T("640"),_T("0.000206611592"),_T("0.00625000065"),_T("0.0000229568435"),_T("0.000000159422525"),_T("1"),
		 _T("247.105407"),_T("16.4736938"),_T("0.164736938"),_T("0.0000274561564"),
		 _T("0.000000274561564")},	// 英亩
		{_T("1"),_T("0.01"),_T("0.0001"),_T("0.000001"),_T("0.00000001"),_T("0.0000000001"),_T("0.000000000001"),_T("0.000000000000000001"),
		 _T("2.58998811"),_T("0.00000083612736"),_T("0.0000252928526"),_T("0.00000009290304"),_T("0.00000000064516"),_T("0.004046856"),
		 _T("1"),_T("0.666666666666666666666666667"),_T("0.00066666666666666666666667"),_T("0.000000111111111111111111111"),
		 _T("0.0000000011111111111111111")},	// 平方公里
		{_T("15"),_T("0.15"),_T("0.0015"),_T("0.000015"),_T("0.00000015"),_T("0.0000000015"),_T("0.000000000015"),_T("0.000000000000000015"),
		 _T("38.8498217"),_T("0.0000125419104"),_T("0.00037939279"),_T("0.0000013935456"),_T("0.0000000096774"),_T("0.06070284"),
		 _T("15"),_T("1"),_T("0.01"),_T("0.00000166666666666666666667"),
		 _T("0.000000016666666666666666667")},	// 顷
		{_T("1500"),_T("15"),_T("0.15"),_T("0.0015"),_T("0.000015"),_T("0.00000015"),_T("0.0000000015"),_T("0.0000000000000015"),
		 _T("3884.98217"),_T("0.00125419104"),_T("0.037939279"),_T("0.00013935456"),_T("0.00000096774"),_T("6.070284"),
		 _T("1500"),_T("100"),_T("1"),_T("0.000166666666666666666667"),
		 _T("0.0000016666666666666666667")},	// 亩
		{_T("9000000"),_T("90000"),_T("900"),_T("9"),_T("0.09"),_T("0.0009"),_T("0.000009"),_T("0.000000000009"),
		 _T("23309893"),_T("7.52514624"),_T("227.635674"),_T("0.83612736"),_T("0.00580644"),_T("36421.704"),
		 _T("9000000"),_T("600000"),_T("6000"),_T("1"),
		 _T("0.01")},	// 平方尺
		{_T("900000000"),_T("9000000"),_T("90000"),_T("900"),_T("9"),_T("0.09"),_T("0.0009"),_T("0.0000000009"),
		 _T("2330989300"),_T("752.514624"),_T("22763.5674"),_T("83.612736"),_T("0.580644"),_T("3642170.4"),
		 _T("900000000"),_T("60000000"),_T("600000"),_T("100"),
		 _T("1")}	// 平方寸
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 体积转换
void Transform3()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][16][30] = {
		{_T("1"),_T("0.001"),_T("0.000001"),_T("0.000000001"),_T("0.1"),_T("0.001"),_T("0.0001"),_T("0.00001"),_T("0.000001"),
		 _T("0.0283168"),_T("0.00001638703703704"),_T("0.7645536"),_T("1233.481837548"),_T("0.003785411784"),_T("0.00454609188")},	// 立方米
	    {_T("1000"),_T("1"),_T("0.001"),_T("0.000001"),_T("100"),_T("1"),_T("0.1"),_T("0.01"),_T("0.001"),
		 _T("28.3168"),_T("0.01638703703704"),_T("764.5536"),_T("1233481.837548"),_T("3.785411784"),_T("4.54609188")},	// 立方分米
		{_T("1000000"),_T("1000"),_T("1"),_T("0.001"),_T("100000"),_T("1000"),_T("100"),_T("10"),_T("1"),
		 _T("28316.8"),_T("16.38703703704"),_T("764553.6"),_T("1233481837.548"),_T("3785.411784"),_T("4546.09188")},	// 立方厘米
		{_T("1000000000"),_T("1000000"),_T("1000"),_T("1"),_T("100000000"),_T("1000000"),_T("100000"),_T("10000"),_T("1000"),
		 _T("28316800"),_T("16387.03703704"),_T("764553600"),_T("1233481837548"),_T("3785411.784"),_T("4546091.88")},	// 立方毫米
		{_T("10"),_T("0.01"),_T("0.00001"),_T("0.00000001"),_T("1"),_T("0.01"),_T("0.001"),_T("0.0001"),_T("0.00001"),
		 _T("0.283168"),_T("0.0001638703703704"),_T("7.645536"),_T("12334.81837548"),_T("0.03785411784"),_T("0.0454609188")},	// 公石
		{_T("1000"),_T("1"),_T("0.001"),_T("0.000001"),_T("100"),_T("1"),_T("0.1"),_T("0.01"),_T("0.001"),
		 _T("28.3168"),_T("0.01638703703704"),_T("764.5536"),_T("1233481.837548"),_T("3.785411784"),_T("4.54609188")},	// 升
		{_T("10000"),_T("10"),_T("0.01"),_T("0.00001"),_T("1000"),_T("10"),_T("1"),_T("0.1"),_T("0.01"),
		 _T("283.168"),_T("0.1638703703704"),_T("7645.536"),_T("12334818.37548"),_T("37.85411784"),_T("45.4609188")},	// 分升
		{_T("100000"),_T("100"),_T("0.1"),_T("0.0001"),_T("10000"),_T("100"),_T("10"),_T("1"),_T("0.1"),
		 _T("2831.68"),_T("1.638703703704"),_T("76455.36"),_T("123348183.7548"),_T("378.5411784"),_T("454.609188")},	// 厘升
		{_T("1000000000"),_T("1000000"),_T("1000"),_T("1"),_T("100000000"),_T("1000000"),_T("100000"),_T("10000"),_T("1000"),
		 _T("28316800"),_T("16387.03703704"),_T("764553600"),_T("1233481837548"),_T("3785411.784"),_T("4546091.88")},	// 毫升
		{_T("35.31472482766"),_T("0.03531472482766"),_T("0.00003531472482766"),_T("0.00000003531472482766"),_T("3.531472482766"),_T("0.03531472482766"),_T("0.003531472482766"),_T("0.0003531472482766"),_T("0.00003531472482766"),
		 _T("1"),_T("0.0005787037.037037037037"),_T("27"),_T("43560.07167291"),_T("0.1605439837835"),_T("0.133680807755114")},	// 立方英尺
		{_T("61023.8445022"),_T("61.0238445022"),_T("0.0610238445022"),_T("0.0000610238445022"),_T("6102.38445022"),_T("61.0238445022"),_T("6.10238445022"),_T("0.610238445022"),_T("0.0610238445022"),
		 _T("1728"),_T("1"),_T("46656"),_T("75271803.85079"),_T("231.0003800836"),_T("277.4200039779")},	// 立方英寸
		{_T("1.307952771395"),_T("0.001307952771395"),_T("0.000001307952771395"),_T("0.000000001307952771395"),_T("0.1307952771395"),_T("0.001307952771395"),_T("0.0001307952771395"),_T("0.00001307952771395"),_T("0.00001307952771395"),
		 _T("0.037037037037037037"),_T("0.00002143347050754"),_T("1"),_T("1613.3359879"),_T("0.004951139833754"),_T("0.005946073473462")},	// 立方码
		{_T("0.0008107131937899"),_T("0.0000008107131937899"),_T("0.0000000008107131937899"),_T("0.0000000000008107131937899"),_T("0.00008107131937899"),_T("0.0000008107131937899"),_T("0.00000008107131937899"),_T("0.000000008107131937899"),_T("0.0000000008107131937899"),
		 _T("0.00002295680336591"),_T("0.00000001328518713305"),_T("0.0006198336908796"),_T("1"),_T("0.000003068883277217"),_T("0.000003685576667297")},	// 亩英尺
		{_T("264.1720523581"),_T("0.2641720523581"),_T("0.0002641720523581"),_T("0.0000002641720523581"),_T("26.41720523581"),_T("0.2641720523581"),_T("0.02641720523581"),_T("0.002641720523581"),_T("0.0002641720523581"),
		 _T("7.4805071722215"),_T("0.004328997206143"),_T("201.9736936498"),_T("325851.4285714"),_T("1"),_T("1.200950422148")},	// 加仑(美制)
		{_T("219.9691573326"),_T("0.2199691573326"),_T("0.0002199691573326"),_T("0.0000002199691573326"),_T("21.99691573326"),_T("0.2199691573326"),_T("0.02199691573326"),_T("0.002199691573326"),_T("0.0002199691573326"),
		 _T("6.22882234355"),_T("0.003604642728215"),_T("168.1782111276"),_T("271327.9603903"),_T("0.8326738402832"),_T("1")}	// 加仑(英制)
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 时间转换
void Transform4()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][11][30] = {
		{_T("1"),_T("0.08333333333334"),_T("0.0191780822"),_T("0.00273972603"),_T("0.000114155251"),_T("0.0000019025872"),_T("0.000000031709792"),
		 _T("0.000000000031709792"),_T("0.000000000000031709792"),_T("0.000000000000000031709792"),_T("0.000000000000000000031709792")
		},
		{_T("12"),_T("1"),_T("0.233333333333"),_T("0.03333333333"),_T("0.0013888888889"),_T("0.0000231481481"),_T("0.000000385802469"),
		 _T("0.000000000385802469"),_T("0.000000000000385802469"),_T("0.000000000000000385802469"),_T("0.000000000000000000385802469")
		},
		{_T("52.1428571"),_T("4.28571429"),_T("1"),_T("0.142857143"),_T("0.00595238059"),_T("0.0000992063492"),_T("0.00000165343915"),
		 _T("0.00000000165343915"),_T("0.00000000000165343915"),_T("0.00000000000000165343915"),_T("0.00000000000000000165343915")
		 },
		{_T("365"),_T("30"),_T("7"),_T("1"),_T("0.41666666667"),_T("0.000694444444444"),_T("0.0000115740741"),
		 _T("0.0000000115740741"),_T("0.0000000000115740741"),_T("0.0000000000000115740741"),_T("0.0000000000000000115740741")
		},
		{_T("8760"),_T("720"),_T("168"),_T("24"),_T("1"),_T("0.166666666667"),_T("0.00027777777778"),
		 _T("0.00000027777777778"),_T("0.00000000027777777778"),_T("0.00000000000027777777778"),_T("0.00000000000000027777777778")
		},
		{_T("525600"),_T("43200"),_T("10080"),_T("1440"),_T("60"),_T("1"),_T("0.0166666666666667"),
		 _T("0.0000166666666666667"),_T("0.0000000166666666666667"),_T("0.0000000000166666666666667"),_T("0.000000000000016666666666667")
		},
		{_T("31536000"),_T("2592000"),_T("604800"),_T("86400"),_T("3600"),_T("60"),_T("1"),
		 _T("0.001"),_T("0.000001"),_T("0.000000001"),_T("0.000000000001")
		},
		{_T("31536000000"),_T("2592000000"),_T("604800000"),_T("86400000"),_T("3600000"),_T("60000"),_T("1000"),
		 _T("1"),_T("0.001"),_T("0.000001"),_T("0.000000001")
		},
		{_T("31536000000000"),_T("2592000000000"),_T("604800000000"),_T("86400000000"),_T("3600000000"),_T("60000000"),_T("1000000"),
		 _T("1000"),_T("1"),_T("0.001"),_T("0.000001")
		},
		{_T("31536000000000000"),_T("2592000000000000"),_T("604800000000000"),_T("86400000000000"),_T("3600000000000"),_T("60000000000"),_T("1000000000"),
		 _T("1000000"),_T("1000"),_T("1"),_T("0.001")
		},
		{_T("31536000000000000000"),_T("2592000000000000000"),_T("604800000000000000"),_T("86400000000000000"),_T("3600000000000000"),_T("60000000000000"),_T("1000000000000"),
		 _T("1000000000"),_T("1000000"),_T("1000"),_T("1")
		}
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
} 	// 时间转换


// 温度转换
void Transform5()
{
	memset(TraEd, 0, sizeof(TraEd));
	
	MyChar t[1000] = { 0 };
	if(Tranumber== Tranumber1)
		_tcscpy_s(TraEd, _tcslen(Tra) + 1,Tra);
	else if (Tranumber == 0 && Tranumber1 == 1)
	{
		MyChar s[][5] = { _T("1.8"),_T("32") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
	}
	else if (Tranumber == 0 && Tranumber1 == 2)
	{
		MyChar s[] = { _T("273.15") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s);	// 加法
	}
	else if (Tranumber == 0 && Tranumber1 == 3)
	{
		MyChar s[][10] = { _T("273.15"),_T("1.8") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
	}
	else if (Tranumber == 0 && Tranumber1 == 4)
	{
		MyChar s[10] = { _T("0.8") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumber(t, s);	// 乘法
	}
	else if (Tranumber == 1 && Tranumber1 == 0)
	{
		MyChar s[][40] = { _T("0.55555555555555555556"),_T("-32") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[1]);	// 加法

		bignumber(TraEd, s[0]);	// 乘法
	}
	else if (Tranumber == 1 && Tranumber1 == 2)
	{
		MyChar s[][40] = { _T("-32"),_T("0.5555555555555555556"),_T("273.15")};
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[2]);	// 加法
	}
	else if (Tranumber == 1 && Tranumber1 == 3)
	{
		MyChar s[][40] = { _T("-32"),_T("0.5555555555555555556"),_T("273.15"),_T("1.8") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[2]);	// 加法
		bignumber(TraEd, s[3]);	// 乘法
	}
	else if (Tranumber == 1 && Tranumber1 == 4)
	{
		MyChar s[][40] = { _T("-32"),_T("0.5555555555555555556"),_T("0.8") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
		bignumber(TraEd, s[2]);	// 乘法
	}
	else if (Tranumber == 2 && Tranumber1 == 0)
	{
		MyChar s[30] = { _T("-273.15") };
		_tcscpy_s(t, sizeof(t), Tra);
		bignumberadd(t, s);	// 加法
	}
	else if (Tranumber == 2 && Tranumber1 == 1)
	{
		MyChar s[][40] = { _T("-273.15"),_T("1.8"),_T("32") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[2]);	// 加法
	}
	else if (Tranumber == 2 && Tranumber1 == 3)
	{
		MyChar s[30] = { _T("1.8") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s);	// 乘法
	}
	else if (Tranumber == 2 && Tranumber1 == 4)
	{
		MyChar s[][40] = { _T("-273.15"),_T("0.8") };
		_tcscpy_s(t, _tcslen(Tra) + 1, Tra);
		bignumberadd(t, s[0]);	// 加法
		bignumber(TraEd, s[1]);	// 乘法
	}
	else if (Tranumber == 3 && Tranumber1 == 0)
	{
		MyChar s[][40] = { _T("0.555555555555555555556"),_T("-273.15") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
	}
	else if (Tranumber == 3 && Tranumber1 == 1)
	{
		MyChar s[][40] = { _T("0.555555555555555555556"),_T("-273.15"),_T("1.8"),_T("32") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
		bignumber(TraEd, s[2]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[3]);	// 加法
	}
	else if (Tranumber == 3 && Tranumber1 == 2)
	{
		MyChar s[][40] = { _T("0.555555555555555555556")};
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
	}
	else if (Tranumber == 3 && Tranumber1 == 4)
	{
		MyChar s[][40] = { _T("0.555555555555555555556"),_T("-273.15"),_T("0.8") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
		bignumber(TraEd, s[2]);	// 乘法
	}
	else if (Tranumber == 4 && Tranumber1 == 0)
	{
		MyChar s[][40] = { _T("1.25") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
	}
	else if (Tranumber == 4 && Tranumber1 == 1)
	{
		MyChar s[][40] = { _T("1.25"),_T("1.8") ,_T("32")};
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		bignumber(TraEd, s[1]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[2]);	// 加法
	}
	else if (Tranumber == 4 && Tranumber1 == 2)
	{
		MyChar s[][40] = { _T("1.25"),_T("273.15") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
	}
	else if (Tranumber == 4 && Tranumber1 == 3)
	{
		MyChar s[][40] = { _T("1.25"),_T("273.15"),_T("1.8") };
		_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
		bignumber(TraEd, s[0]);	// 乘法
		_tcscpy_s(t, _tcslen(TraEd) + 1, TraEd);
		bignumberadd(t, s[1]);	// 加法
		bignumber(TraEd, s[2]);	// 乘法
	}
	if (_tcslen(TraEd) > 30)BlStr();
}	// 温度转换


// 速度转换
void Transform6()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][40][30] = {
		{_T("1"),_T("12"),_T("39.3700787"),_T("10.936133"),
		 _T("39370.0787"),_T("20.2537183"),_T("17.6"),_T("13397.63780"),_T("11802852700")},	// 英寸/秒 ips
		{_T("0.083333333333333333"),_T("1"),_T("3.2808399"),_T("0.911344415"),
		 _T("3280.8399"),_T("1.68780986"),_T("1.466666666666666666666667"),_T("1116.46982"),_T("983571056")},	// 英尺/秒 fps
		{_T("0.0254"),_T("0.3084"),_T("1"),_T("0.27777777777777777777778"),
		 _T("1000"),_T("0.514444444444444444"),_T("0.44704"),_T("340.3"),_T("299792458")},	// 米/秒 m/s
		{_T("0.09144"),_T("1.09728"),_T("3.6"),_T("1"),
		 _T("3600"),_T("1.852"),_T("1.609344"),_T("1255.08"),_T("1079252850")},	// 千米/小时 km/h
		{_T("0.0000254"),_T("0.0003084"),_T("0.001"),_T("0.00027777777777777777777778"),
		 _T("1"),_T("0.000514444444444444444"),_T("0.00044704"),_T("0.3403"),_T("299792.458")},	// 千米/秒 km/s
		{_T("0.0493736501"),_T("0.592483801"),_T("1.94384449"),_T("0.539956803"),
		 _T("1943.84449"),_T("1"),_T("0.868976242"),_T("661.490281"),_T("582749918")},	// 海里/小时 kn
		{_T("0.0568181818181818182"),_T("0.68181818181818182"),_T("2.23693629"),_T("0.621371192"),
		 _T("2236.93629"),_T("1.15077945"),_T("1"),_T("761.22942"),_T("670616629")},	// 英里/小时 mph
		{_T("0.0000746400235"),_T("0.000895680282"),_T("0.0029385836"),_T("0.0008162732233"),
		 _T("2.9385836"),_T("0.00151173801"),_T("0.00131366441"),_T("1"),_T("880965.201")},	// 马赫 Ma
		{_T("0.0000000000847252802"),_T("0.00000000101670336"),_T("0.00000000333564095"),_T("0.000000000926566931"),
		 _T("0.00000333564095"),_T("0.00000000171600196"),_T("0.00000000149116493"),_T("0.00000113511862"),_T("1")}	// 光速 c
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 重量转换
void Transform7()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][21][30] = {
		{_T("1"),_T("0.001"),_T("0.000001"),_T("0.000000001"),_T("0.000000000001"),_T("0.1"),_T("0.00045359237"),_T("0.0000283495231"),_T("0.0000002"),
		 _T("0.00000006479891"),_T("0.90718474"),_T("1.01604691"),_T("0.0508023454"),_T("0.045359237"),_T("0.00635029318"),
		 _T("0.0000017718452"),_T("0.05"),_T("0.0005"),_T("0.000005"),_T("0.00005"),_T("0.0006")},	// 吨 t
		{_T("1000"),_T("1"),_T("0.001"),_T("0.000001"),_T("0.000000001"),_T("100"),_T("0.45359237"),_T("0.0283495231"),_T("0.0002"),
		 _T("0.00006479891"),_T("907.18474"),_T("1016.04691"),_T("50.8023454"),_T("45.359237"),_T("6.35029318"),
		 _T("0.0017718452"),_T("50"),_T("0.5"),_T("0.005"),_T("0.05"),_T("0.6")},	// 千克 kg
		{_T("1000000"),_T("1000"),_T("1"),_T("0.001"),_T("0.000001"),_T("100000"),_T("453.59237"),_T("28.3495231"),_T("0.2"),
         _T("0.06479891"),_T("907184.74"),_T("1016046.91"),_T("50802.3454"),_T("45359.237"),_T("6350.29318"),
		 _T("1.7718452"),_T("50000"),_T("500"),_T("5"),_T("50"),_T("600")},	// 克 g
		{_T("1000000000"),_T("1000000"),_T("1000"),_T("1"),_T("0.001"),_T("100000000"),_T("453592.37"),_T("28349.5231"),_T("200"),
		 _T("64.79891"),_T("907184740"),_T("1016046910"),_T("50802345.4"),_T("45359237"),_T("6350293.18"),
		 _T("1771.8452"),_T("50000000"),_T("500000"),_T("5000"),_T("50000"),_T("600000")},	// 毫克 mg
		{_T("1000000000000"),_T("1000000000"),_T("1000000"),_T("1000"),_T("1"),_T("100000000000"),_T("453592370"),_T("28349523.1"),_T("200000"),
		 _T("64798.91"),_T("907184740000"),_T("1016046910000"),_T("50802345400"),_T("45359237000"),_T("6350293180"),
		 _T("1771845.2"),_T("50000000000"),_T("500000000"),_T("5000000"),_T("50000000"),_T("600000000")},	// 微克 μg
		{_T("10"),_T("0.01"),_T("0.00001"),_T("0.00000001"),_T("0.00000000001"),_T("1"),_T("0.0045359237"),_T("0.000283495231"),_T("0.000002"),
		 _T("0.0000006479891"),_T("9.0718474"),_T("10.1604691"),_T("0.508023454"),_T("0.45359237"),_T("0.0635029318"),
		 _T("0.000017718452"),_T("0.5"),_T("0.005"),_T("0.00005"),_T("0.0005"),_T("0.006") },	// 公担 q
		{_T("2204.62262"),_T("2.20462262"),_T("0.00220462262"),_T("0.00000220462262"),_T("0.00000000220462262"),_T("220.462262"),_T("1"),_T("0.0625"),_T("0.000440924524"),
		 _T("0.000142857143"),_T("2000"),_T("2240"),_T("112"),_T("100"),_T("14"),
		 _T("0.00390625"),_T("110.231131"),_T("1.10231131"),_T("0.0110231131"),_T("0.110231131"),_T("1.32277357") },	// 磅 lb
		{_T("35273.9619"),_T("35.2739619"),_T("0.0352739619"),_T("0.0000352739619"),_T("0.0000000352739619"),_T("3527.39619"),_T("16"),_T("1"),_T("0.00705479239"),
		 _T("0.00228571429"),_T("3200"),_T("35840"),_T("1792"),_T("1600"),_T("224"),
		 _T("0.0625"),_T("1763.6981"),_T("17.636981"),_T("0.17636981"),_T("1.7636981"),_T("21.1643772") },	// 盎司 oz
		{_T("5000000"),_T("5000"),_T("5"),_T("0.005"),_T("0.000005"),_T("500000"),_T("2267.96185"),_T("141.747616"),_T("1"),
		 _T("0.32399455"),_T("4535923.7"),_T("5080234.54"),_T("254011.727"),_T("226796.185"),_T("31751.4659"),
		 _T("8.85922598"),_T("250000"),_T("2500"),_T("25"),_T("250"),_T("3000") },	// 克拉 ct
		{_T("15432358.4"),_T("15432.3584"),_T("15.4323584"),_T("0.0154323584"),_T("0.0000154323584"),_T("1543235.84"),_T("7000"),_T("437.5"),_T("3.08647167"),
		 _T("1"),_T("14000000"),_T("15680000"),_T("784000"),_T("700000"),_T("98000"),
		 _T("27.34375"),_T("771617.918"),_T("7716.17918"),_T("77.1617918"),_T("771.617918"),_T("9259.41501") },	// 格令 gr
		{_T("1.10231131"),_T("0.00110231131"),_T("0.00000110231131"),_T("0.00000000110231131"),_T("0.00000000000110231131"),_T("0.110231131"),_T("0.0005"),_T("0.00003125"),_T("0.000000220462262"),
		 _T("0.0000000714285714"),_T("1"),_T("1.12"),_T("0.056"),_T("0.05"),_T("0.007"),
		 _T("0.000001953125"),_T("0.0551155655"),_T("0.000551155655"),_T("0.00000551155655"),_T("0.0000551155655"),_T("0.000661386787") },	// 短吨(美制) sh.t
		{_T("0.984206528"),_T("0.000984206528"),_T("0.000000984206528"),_T("0.000000000984206528"),_T("0.000000000000984206528"),_T("0.0984206528"),_T("0.000446428571"),_T("0.0000279017857"),_T("0.000000196841306"),
		 _T("0.0000000637755102"),_T("0.892857143"),_T("1"),_T("0.05"),_T("0.0446428571"),_T("0.00625"),
		 _T("0.00000174386161"),_T("0.0492103264"),_T("0.000492103264"),_T("0.00000492103264"),_T("0.0000492103264"),_T("0.000590523917") },	// 长吨(美制) l.t
		{_T("19.6841306"),_T("0.0196841306"),_T("0.0000196841306"),_T("0.0000000196841306"),_T("0.0000000000196841306"),_T("1.96841306"),_T("0.00892857143"),_T("0.000558035714"),_T("0.000003936282611"),
		 _T("0.0000012755102"),_T("17.8571429"),_T("20"),_T("1"),_T("0.892857143"),_T("0.125"),
		 _T("0.0000348772321"),_T("0.984206528"),_T("0.00984206528"),_T("0.0000984206528"),_T("0.000984206528"),_T("0.0118104783") },	// 英担 cwt
		{_T("22.0462262"),_T("0.0220462262"),_T("0.0000220462262"),_T("0.0000000220462262"),_T("0.0000000000220462262"),_T("2.20462262"),_T("0.01"),_T("0.000625"),_T("0.00000440924524"),
		 _T("0.00000142857143"),_T("20"),_T("22.4"),_T("1.12"),_T("1"),_T("0.14"),
		 _T("0.0000390625"),_T("1.10231131"),_T("0.00110231131"),_T("0.0000110231131"),_T("0.000110231131"),_T("0.0132277357") },	// 美担 cwt
		{_T("157.473044"),_T("0.157473044"),_T("0.000157473044"),_T("0.000000157473044"),_T("0.000000000157473044"),_T("15.7473044"),_T("0.0714285714"),_T("0.00446428571"),_T("0.0000314946089"),
		 _T("0.0000102040816"),_T("142.857143"),_T("160"),_T("8"),_T("7.14285714"),_T("1"),
		 _T("0.000279017857"),_T("7.87365222"),_T("0.0787365222"),_T("0.000787365222"),_T("0.00787365222"),_T("0.0944838267") },	// 英石 st
		{_T("564383.391"),_T("564.383391"),_T("0.564383391"),_T("0.000564383391"),_T("0.000000564383391"),_T("56438.3391"),_T("256"),_T("16"),_T("0.112876678"),
		 _T("0.0365714286"),_T("512000"),_T("573440"),_T("28672"),_T("25600"),_T("3584"),
		 _T("1"),_T("28219.1696"),_T("282.191696"),_T("2.82191696"),_T("28.2191696"),_T("338.630035") },	// 打兰 dr
		{_T("20"),_T("0.02"),_T("0.00002"),_T("0.00000002"),_T("0.00000000002"),_T("2"),_T("0.0090718474"),_T("0.000566990463"),_T("0.000004"),
		 _T("0.0000012959782"),_T("18.1436948"),_T("20.3209382"),_T("1.01604691"),_T("0.90718474"),_T("0.127005864"),
		 _T("0.0000354369039"),_T("1"),_T("0.01"),_T("0.0001"),_T("0.001"),_T("0.012") },	// 担 dan
		{_T("2000"),_T("2"),_T("0.002"),_T("0.000002"),_T("0.000000002"),_T("200"),_T("0.90718474"),_T("0.0566990463"),_T("0.0004"),
		 _T("0.00012959782"),_T("1814.36948"),_T("2032.09382"),_T("101.604691"),_T("90.718474"),_T("12.7005864"),
		 _T("0.00354369039"),_T("100"),_T("1"),_T("0.01"),_T("0.1"),_T("1.2") },	// 斤 jin
		{_T("200000"),_T("200"),_T("0.2"),_T("0.0002"),_T("0.0000002"),_T("20000"),_T("90.718474"),_T("5.66990463"),_T("0.04"),
		 _T("0.012959782"),_T("181436.948"),_T("203209.382"),_T("10160.4691"),_T("9071.8474"),_T("1270.05864"),
		 _T("0.354369039"),_T("10000"),_T("100"),_T("1"),_T("10"),_T("120") },	// 钱 qian
		{_T("20000"),_T("20"),_T("0.02"),_T("0.00002"),_T("0.00000002"),_T("2000"),_T("9.0718474"),_T("0.566990463"),_T("0.004"),
		 _T("0.0012959782"),_T("18143.6948"),_T("20320.9382"),_T("1016.04691"),_T("907.18474"),_T("127.005864"),
		 _T("0.0354369039"),_T("1000"),_T("10"),_T("0.1"),_T("1"),_T("12") },	// 两 liang
		{_T("1666.66666666666666667"),_T("1.66666666666666666667"),_T("0.00166666666666666666667"),_T("0.00000166666666666666666667"),_T("0.000000001666666666666666667"),_T("166.666666666666666667"),_T("0.755987283"),_T("0.0472492052"),_T("0.000333333333333333333333"),
		 _T("0.000107998183"),_T("1511.97457"),_T("1693.41151"),_T("84.670575757"),_T("75.5987283"),_T("10.583822"),
		 _T("0.00295307533"),_T("83.333333333333333333"),_T("0.83333333333333333333"),_T("0.008333333333333333333333333"),_T("0.08333333333333333333333333"),_T("1") }	// 斤(台湾)jin(tw)

	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 能量转换
void Transform8()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][7][35] = {
		{_T("1"),_T("6241509000000000000"),_T("6241509000000000000000"),_T("26114480000000000000"),
		 _T("26114480000000000000000"),_T("8462350000000000000"),_T("6585142000000000000000")
		},	// 电子伏特
		{_T("0.0000000000000000001602177"),_T("1"),_T("1000"),_T("4.184"),
		 _T("4184"),_T("1.355818"),_T("1055.056")
		},	// 焦耳
		{_T("0.0000000000000000000001602177"),_T("0.001"),_T("1"),_T("0.004184"),
		 _T("4.184"),_T("0.001355818"),_T("1.055056")
		},	// 千焦耳
		{_T("0.00000000000000000003829294"),_T("0.2390057"),_T("239.0057"),_T("1"),
		 _T("1000"),_T("0.324048"),_T("252.1644")
		},	// 热卡路里
		{_T("0.00000000000000000000003829294"),_T("0.000239"),_T("0.2390057"),_T("0.001"),
		 _T("1"),_T("0.000324048"),_T("0.2521644")
		},	// 食物卡路里
		{_T("0.0000000000000000001181705"),_T("0.7375621"),_T("737.5621"),_T("3.08596"),
		 _T("3085.96"),_T("1"),_T("778.1694")
		},	// 英尺磅
		{_T("0.0000000000000000000001518570"),_T("0.000947817"),_T("0.947817"),_T("0.00396566666666"),
		 _T("3.965666666666"),_T("0.001285"),_T("1")
		}	// 英国热量单位
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 功率转换
void Transform9()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][10][30] = {
		{_T("1"),_T("1000"),_T("745.699872"),_T("735.49875"),_T("9.80665"),_T("4184.1004"),_T("1055.05585"),_T("1.3558179"),
		 _T("1"),_T("1")},	// 瓦
		{_T("0.001"),_T("1"),_T("0.745699872"),_T("0.73549875"),_T("0.00980665"),_T("4.1841004"),_T("1.05505585"),_T("0.0013558179"),
		 _T("0.001"),_T("0.001")},	// 千瓦
		{_T("0.0013410021"),_T("1.3410021"),_T("1"),_T("0.9863201"),_T("0.0131509"),_T("5.6109711"),_T("1.4148532"),_T("0.0018181818182"),
		 _T("0.0013410021"),_T("0.0013410021")},	// 马力(英制)
		{_T("0.0013596216"),_T("1.3596216"),_T("1.0138697"),_T("1"),_T("0.01333333333333333333"),_T("5.6887934"),_T("1.4344767"),_T("0.0018434"),
		 _T("0.0013596216"),_T("0.0013596216")},	// 米制马力
		{_T("0.1019716212978"),_T("101.9716212978"),_T("76.0402249"),_T("75"),_T("1"),_T("426.6595015"),_T("107.5857556"),_T("0.138255"),
		 _T("0.1019716212978"),_T("0.1019716212978")},	// 公斤米/秒
		{_T("0.000293"),_T("0.293"),_T("0.1782223"),_T("0.1757842"),_T("0.0023438"),_T("1"),_T("0.2521583"),_T("0.000324"),
		 _T("0.000293"),_T("0.000293")},	// 千卡/秒
		{_T("0.0009478171226666667"),_T("0.947817122666666667"),_T("0.7067871"),_T("0.6971183"),_T("0.0092949"),_T("3.965762"),_T("1"),_T("0.0012851"),
		 _T("0.0009478171226666667"),_T("0.0009478171226666667")},	// 英国热量单位/秒
		{_T("0.7375621488641"),_T("737.5621488641"),_T("550"),_T("542.4760385"),_T("7.2330138"),_T("3086.0340821"),_T("778.1692599"),_T("1"),
		 _T("0.7375621488641"),_T("0.7375621488641")},	// 英尺磅/秒
		{_T("1"),_T("1000"),_T("745.699872"),_T("735.49875"),_T("9.80665"),_T("4184.1004"),_T("1055.05585"),_T("1.3558179"),
		 _T("1"),_T("1")},	// 焦耳/秒
		{_T("1"),_T("1000"),_T("745.699872"),_T("735.49875"),_T("9.80665"),_T("4184.1004"),_T("1055.05585"),_T("1.3558179"),
		 _T("1"),_T("1")}	// 牛顿米/秒
	};

	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 压力转换
void Transform10()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][14][30] = {
		{_T("1"),_T("1000000"),_T("1000"),_T("100"),_T("101325"),_T("133.3223684211"),_T("3386.388157895"),_T("100000"),_T("100"),
		 _T("47.88025690"),_T("6894.757"),_T("9.8066136"),_T("98066.5"),_T("9.80665")},	// 帕斯卡
		{_T("0.000001"),_T("1"),_T("0.001"),_T("0.0001"),_T("0.101325"),_T("0.0001333223684"),_T("0.0033864"),_T("0.1"),_T("0.0001"),
		 _T("0.000047880256.9444444444"),_T("0.006894757"),_T("0.0000098066"),_T("0.0980665"),_T("0.0000098066")},	// 兆帕
		{_T("0.001"),_T("1000"),_T("1"),_T("0.1"),_T("101.325"),_T("0.1333223684"),_T("3.3864"),_T("100"),_T("0.1"),
		 _T("0.047880256.9444444444"),_T("6.894757"),_T("0.0098066"),_T("98.0665"),_T("0.0098066")},	// 千帕
		{_T("0.01"),_T("10000"),_T("10"),_T("1"),_T("1013.25"),_T("1.333223684"),_T("33.864"),_T("1000"),_T("1"),
		 _T("0.47880256.9444444444"),_T("68.94757"),_T("0.098066"),_T("980.665"),_T("0.098066")},	// 百帕
		{_T("0.0000098692327"),_T("9.8692327"),_T("0.0098692327"),_T("0.00098692327"),_T("1"),_T("0.0013158"),_T("0.0334211"),_T("0.9869233"),_T("0.0009869"),
		 _T("0.0004725"),_T("0.068046"),_T("0.0000968"),_T("0.9678411"),_T("0.0000968")},	// 标准大气压
		{_T("0.007500616827"),_T("7500.616827"),_T("7.500616827"),_T("0.7500616827"),_T("760"),_T("1"),_T("25.4"),_T("750.0616827"),_T("0.7500616827"),
		 _T("0.3591315"),_T("51.7149304"),_T("0.0735557"),_T("735.5592401"),_T("0.0735559")},	// 毫米汞柱
		{_T("0.0002952998751"),_T("295.2998751"),_T("0.2952998751"),_T("0.02952998751"),_T("29.9212598"),_T("0.0393701"),_T("1"),_T("29.5299875"),_T("0.0295299875"),
		 _T("0.014139"),_T("2.0360209"),_T("0.0028959"),_T("28.9590252"),_T("0.0028959")},	// 英寸汞柱
		{_T("0.00001"),_T("10"),_T("0.01"),_T("0.001"),_T("1.01325"),_T("0.001333223684211"),_T("0.03386388157895"),_T("1"),_T("0.001"),
		 _T("0.0004788025690"),_T("0.06894757"),_T("0.000098066136"),_T("0.980665"),_T("0.0000980665")},	// 巴
		{_T("0.01"),_T("10000"),_T("10"),_T("1"),_T("1013.25"),_T("1.333223684"),_T("33.864"),_T("1000"),_T("1"),
		 _T("0.47880256.9444444444"),_T("68.94757"),_T("0.098066"),_T("980.665"),_T("0.098066")},	// 毫巴
		{_T("0.0208854351212"),_T("20885.4351212"),_T("20.8854351212"),_T("2.08854351212"),_T("2116.2167137"),_T("2.7844957"),_T("70.7261902"),_T("2088.54351212"),_T("2.08854351212"),
		 _T("1"),_T("144"),_T("0.2048154"),_T("2048.1615233"),_T("0.20481615233")},	// 磅力/平方英尺
		{_T("0.0001450377439"),_T("145.0377439"),_T("0.1450377439"),_T("0.01450377439"),_T("14.6959494"),_T("0.0193368"),_T("0.4911541"),_T("14.5037744"),_T("0.0145037744"),
		 _T("0.0069444"),_T("1"),_T("0.0014223"),_T("14.2233439"),_T("0.0014223")},	// 磅力/平方英寸
		{_T("0.101972"),_T("101972"),_T("101.972"),_T("10.1972"),_T("10332.3129"),_T("13.5951486"),_T("345.3167732"),_T("10197.2"),_T("10.1972"),
		 _T("4.8824456"),_T("703.0721608"),_T("1"),_T("10000.037138"),_T("1.0000037")},	// 毫米水柱
		{_T("0.0000101971621"),_T("10.1971621"),_T("0.0101971621"),_T("0.00101971621"),_T("1.0332275"),_T("0.0013595"),_T("0.0345315"),_T("1.0197162"),_T("0.0010197162"),
		 _T("0.0004882"),_T("0.070307"),_T("0.0001"),_T("1"),_T("0.0001")},	// 公斤力/平方米
		{_T("0.1019716212978"),_T("101971.6212978"),_T("101.9716212978"),_T("10.19716212978"),_T("10332.274528"),_T("13.5950981"),_T("345.3154908"),_T("10197.1621298"),_T("10.1971621298"),
		 _T("4.8824274"),_T("703.0695497"),_T("0.9999963"),_T("10000"),_T("1")}	// 公斤力/平方厘米
	};

	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 角度转换
void Transform11()
{
	memset(TraEd, 0, sizeof(TraEd));
	_tcscpy_s(TraEd, _tcslen(Tra) + 1, Tra);
	MyChar Str[][8][20] = {
		{_T("1"),_T("0.25"),_T("0.0025"),_T("0.00277777777777778"),_T("0.0000463"),_T("0.00000077161"),_T("0.159155"),_T("0.0001592")},	// 圆周
		{_T("4"),_T("1"),_T("0.01"),_T("0.01111111111111111"),_T("0.0001852"),_T("0.0000030864"),_T("0.6366198"),_T("0.0006366")},	// 直角
		{_T("399.99996"),_T("99.9999999999"),_T("1"),_T("1.11111111111111111"),_T("0.0185185"),_T("0.0003086"),_T("63.6619714"),_T("0.063662")},	// 百分度
		{_T("360"),_T("90"),_T("0.9"),_T("1"),_T("0.1666666666666667"),_T("0.00027777777777778"),_T("57.29578"),_T("0.0572958")},	// 度
		{_T("21600"),_T("5400"),_T("54"),_T("60"),_T("1"),_T("0.01666666666666667"),_T("3437.7468"),_T("3.4377468")},	// 分
		{_T("1296000"),_T("324000"),_T("3240"),_T("3600"),_T("60.0000012"),_T("1"),_T("206264.808"),_T("206.264808")},	// 秒
		{_T("6.2831855"),_T("1.5707964"),_T("0.015708"),_T("0.0174533"),_T("0.0002909"),_T("0.0000048481"),_T("1"),_T("0.001")},	// 弧度
		{_T("6283.18548"),_T("1570.79637"),_T("15.7079637"),_T("17.453293"),_T("0.2908882"),_T("0.004848"),_T("1000.000036"),_T("1")}	// 毫弧度
	};
	bignumber(TraEd, Str[Tranumber1][Tranumber]);
	if (_tcslen(TraEd) > 30)BlStr();
}


// 判断转换
void WhatC(int lens)
{
	if		(lens == sizeof(TraS) / sizeof(TraS[0]))Transform();	// 数据
	else if (lens == sizeof(TraC) / sizeof(TraC[0]))Transform1();	// 长度
	else if (lens == sizeof(TraM) / sizeof(TraM[0]))Transform2();	// 面积
	else if (lens == sizeof(TraT) / sizeof(TraT[0]))Transform3();	// 体积
	else if (lens == sizeof(TraSH) / sizeof(TraSH[0]))Transform4();	// 时间
	else if (lens == sizeof(TraW) / sizeof(TraW[0]))Transform5();	// 温度
	else if (lens == sizeof(TraSD) / sizeof(TraSD[0]))Transform6();	// 速度
	else if (lens == sizeof(TraZ) / sizeof(TraZ[0]))Transform7();	// 重量
	else if (lens == sizeof(TraN) / sizeof(TraN[0]))Transform8();	// 能量
	else if (lens == sizeof(TraG) / sizeof(TraG[0]))Transform9();	// 功率
	else if (lens == sizeof(TraY) / sizeof(TraY[0]))Transform10();	// 压力
	else if (lens == sizeof(TraJ) / sizeof(TraJ[0]))Transform11();	// 角度
}


/***********************************数据转换**********************************/
void updatewithinput5()
{
	Input(sizeof(TraS) / sizeof(TraS[0]),7);
	int t = (int)(sizeof(TraS) / sizeof(TraS[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen5()
{
	BeginBatchDraw();	// 开始批量绘图
	Output1(TraS,_T("数据转换"));

	Output(13);

	EndBatchDraw();
}

/*************************************长度转换********************************/
void updatewithinput6()
{
	Input(sizeof(TraC) / sizeof(TraC[0]), 8);
	int t = (int)(sizeof(TraC) / sizeof(TraC[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen6()
{
	BeginBatchDraw();	// 开始批量绘图
	Output1(TraC,_T("长度转换"));

	Output(sizeof(TraC) / sizeof(TraC[0]));

	EndBatchDraw();
}

/*************************************面积转换********************************/
void updatewithinput7()
{
	Input(sizeof(TraM) / sizeof(TraM[0]), 9);
	int t = (int)(sizeof(TraM) / sizeof(TraM[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen7()
{
	BeginBatchDraw();	// 开始批量绘图
	Output1(TraM,_T("面积转换"));

	Output(sizeof(TraM) / sizeof(TraM[0]));

	EndBatchDraw();
}

/*************************************体积转换********************************/
void updatewithinput8()
{
	Input(sizeof(TraT) / sizeof(TraT[0]),10);
	int t = (int)(sizeof(TraT) / sizeof(TraT[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen8()
{
	BeginBatchDraw();	// 开始批量绘图
	Output1(TraT,_T("体积转换"));

	Output(sizeof(TraT) / sizeof(TraT[0]));

	EndBatchDraw();
}

/*************************************时间转换********************************/
void updatewithinput9()
{
	Input(sizeof(TraSH) / sizeof(TraSH[0]), 11);
	int t = (int)(sizeof(TraSH) / sizeof(TraSH[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen9()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraSH,_T("时间转换"));

	Output(sizeof(TraSH) / sizeof(TraSH[0]));

	EndBatchDraw();
}

/*************************************温度转换********************************/
void updatewithinput10()
{
	Input(sizeof(TraW) / sizeof(TraW[0]), 12);
	int t = (int)(sizeof(TraW) / sizeof(TraW[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen10()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraW,_T("温度转换"));

	Output(sizeof(TraW) / sizeof(TraW[0]));

	EndBatchDraw();
}

/*************************************速度转换********************************/
void updatewithinput11()
{
	Input(sizeof(TraSD) / sizeof(TraSD[0]), 13);
	int t = (int)(sizeof(TraSD) / sizeof(TraSD[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen11()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraSD,_T("速度转换"));

	Output(sizeof(TraSD) / sizeof(TraSD[0]));

	EndBatchDraw();
}

/*************************************重量转换********************************/
void updatewithinput12()
{
	Input(sizeof(TraZ) / sizeof(TraZ[0]), 14);
	int t = (int)(sizeof(TraZ) / sizeof(TraZ[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen12()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraZ,_T("重量转换"));

	Output(sizeof(TraZ) / sizeof(TraZ[0]));

	EndBatchDraw();
}

/*************************************能量转换********************************/
void updatewithinput13()
{
	Input(sizeof(TraN) / sizeof(TraN[0]),15);
	int t = (int)(sizeof(TraN) / sizeof(TraN[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen13()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraN,_T("能量转换"));

	Output(sizeof(TraN) / sizeof(TraN[0]));

	EndBatchDraw();
}

/*************************************功率转换********************************/
void updatewithinput14()
{
	Input(sizeof(TraG) / sizeof(TraG[0]), 16);
	int t = (int)(sizeof(TraG) / sizeof(TraG[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen14()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraG,_T("功率转换"));

	Output(sizeof(TraG) / sizeof(TraG[0]));

	EndBatchDraw();
}

/*************************************压力转换********************************/
void updatewithinput15()
{
	Input(sizeof(TraY) / sizeof(TraY[0]),17);
	int t = (int)(sizeof(TraY) / sizeof(TraY[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen15()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraY,_T("压力转换"));

	Output(sizeof(TraY) / sizeof(TraY[0]));

	EndBatchDraw();
}

/*************************************角度转换********************************/
void updatewithinput16()
{
	Input(sizeof(TraJ) / sizeof(TraJ[0]), 18);
	int t = (int)(sizeof(TraJ) / sizeof(TraJ[0]) - 8) * 30;
	if (fly > 0)
		fly -= fly / 2;
	if (fly < -t)
		fly += -((fly + t) / 2);
}

void showscreen16()
{
	BeginBatchDraw();	// 开始批量绘图

	Output1(TraJ,_T("角度转换"));

	Output(sizeof(TraJ) / sizeof(TraJ[0]));

	EndBatchDraw();
}


// 输入
void Input(int lens, int number)
{
	MOUSEMSG m;	// 定义鼠标消息

	while (MouseHit())	// 检查是否有鼠标消息
	{
		m = GetMouseMsg();
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (m.x > i * 102 && m.x < i * 102 + 95 && m.y>445 + j * 52 && m.y < 495 + j * 52)
				{
					button[i][j] = true;
					if (m.uMsg == WM_LBUTTONDOWN && !Button[1] && !Button[3])
					{
						if (ReTra < 23)
						{
							if (j == 2 && i == 0)Tra[++ReTra] = '1';
							else if (j == 2 && i == 1)Tra[++ReTra] = '2';
							else if (j == 2 && i == 2)Tra[++ReTra] = '3';
							else if (j == 1 && i == 0)Tra[++ReTra] = '4';
							else if (j == 1 && i == 1)Tra[++ReTra] = '5';
							else if (j == 1 && i == 2)Tra[++ReTra] = '6';
							else if (j == 0 && i == 0)Tra[++ReTra] = '7';
							else if (j == 0 && i == 1)Tra[++ReTra] = '8';
							else if (j == 0 && i == 2)Tra[++ReTra] = '9';
							else if (j == 1 && i == 3)Tra[++ReTra] = '0';
							WhatC(lens);
						}
						if (j == 2 && i == 3 && ReTra != -1 && !xs)Tra[++ReTra] = '.', xs = true;
						if (j == 0 && i == 3 && ReTra >= 0)
						{
							if (Tra[ReTra] == '.')xs = false;
							Tra[ReTra--] = '\0';
							WhatC(lens);
						}
					}
					if (m.uMsg == WM_RBUTTONDOWN && !Button[1] && !Button[3])
					{
						if (j == 0 && i == 3)
						{
							memset(Tra, 0, sizeof(Tra));
							ReTra = -1; xs = false;
							WhatC(lens);
						}
						if (j == 2 && i == 3 && ReTra != -1)
						{
							if (Tra[0] != '-')
							{
								for (int i =  ReTra; i >=0; i--)
									Tra[i + 1] = Tra[i];
								Tra[0] = '-';
								ReTra++;
							}
							else
							{
								for(int i=1;i<= ReTra;i++)
									Tra[i - 1] = Tra[i];
								Tra[ReTra--] = '\0';
							}
							WhatC(lens);
						}
					}
				}
				else button[i][j] = false;
			}
		}

		if (m.x > 5 && m.x < 40 && m.y > 0 && m.y < 35)	// 设置
		{
			help[0] = true;
			if (m.uMsg == WM_LBUTTONDOWN) software[0] = -1, software[2] = number;
		}
		else help[0] = false;

		if (Button[1])	// 输入选择
		{
			for (int i = 0; i < lens; i++)
			{
				if (m.y > 55 + 30 * i + fly && m.y < 85 + 30 * i + fly && m.y > 50 && m.y < 300)
				{
					Button1[i] = true;
					if (m.uMsg == WM_LBUTTONDOWN)
					{
						Tranumber = i;
						Button[1] = false;
						WhatC(lens);
					}
				}
				else
				{
					Button1[i] = false;
					if (m.uMsg == WM_LBUTTONDOWN)
						Button[1] = false;
				}
			}

			if (m.uMsg == WM_MOUSEWHEEL && m.y >= 50 && m.y <= 300)
			{
				if (m.wheel < 0)
					fly -= 30;
				else
					fly += 30;
			}
		}

		if (Button[3])	// 输出选择
		{
			for (int i = 0; i < lens; i++)
			{
				if (m.y > 205 + 30 * i + fly && m.y < 235 + 30 * i + fly && m.y > 200 && m.y < 450)
				{
					Button1[i] = true;
					if (m.uMsg == WM_LBUTTONDOWN)
					{
						Tranumber1 = i;
						Button[3] = false;
						WhatC(lens);
					}
				}
				else
				{
					Button1[i] = false;
					if (m.uMsg == WM_LBUTTONDOWN)
						Button[3] = false;
				}
			}

			if (m.uMsg == WM_MOUSEWHEEL && m.y >= 200 && m.y <= 450)
			{
				if (m.wheel < 0)
					fly -= 30;
				else
					fly += 30;
			}
		}

		if (m.x > 10 && m.x < 25 && m.y>175 && m.y < 190)	// 选择输入单位
		{
			Button[0] = true;
			if (m.uMsg == WM_LBUTTONDOWN && !Button[1] && !Button[3])
			{
				Button[1] = true;
			}
		}
		else
			Button[0] = false;
		if (m.x > 10 && m.x < 25 && m.y>375 && m.y < 390)	// 选择输出单位
		{
			Button[2] = true;
			if (m.uMsg == WM_LBUTTONDOWN && !Button[3] && !Button[1])
			{
				Button[3] = true;
			}
		}
		else
			Button[2] = false;
	}
}


// 输出
void Output(int lens)
{
	IMAGE blacks = setimage(100, 50, RGB(0, 0, 0));	// 设置绘图

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (j < 3 && i <= 2 || j == 1 && i == 3)
			{
				if (!button[i][j])my_putimage(i * 102, 444 + j * 52, &blacks, RGB(255, 255, 255), 0, 1, 90, 0);
				else my_putimage(i * 102, 445 + j * 52, &blacks, RGB(255, 255, 255), 0, 1, 50, 0);
			}
			else
			{
				if (!button[i][j])
					my_putimage(i * 102, 444 + j * 52, &blacks, RGB(255, 255, 255), 0, 1, 80, 0);
				else
				{
					IMAGE blacks = setimage(100, 50, RGB(240, 0, 0));	// 设置绘图
					my_putimage(i * 102, 444 + j * 52, &blacks, RGB(255, 255, 255), 0, 1, 60, 0);
				}
			}
		}
	}
	settextstyle(30, 0, _T("微软雅黑"), 0, 0, 900, 0, 0, 0);
	settextcolor(RGB(255, 255, 255));
	setbkmode(TRANSPARENT);
	settextstyle(21, 0, _T("Consolas"));
	outtextxy(315, 461, _T("delete/C"));
	settextstyle(30, 0, _T("Consolas"));
	outtextxy(142, 560, '2');
	outtextxy(40, 560, '1');
	outtextxy(244, 560, '3');
	outtextxy(40, 508, '4');
	outtextxy(142, 508, '5');
	outtextxy(244, 508, '6');
	outtextxy(40, 456, '7');
	outtextxy(142, 456, '8');
	outtextxy(244, 456, '9');
	outtextxy(327, 560, _T("./±"));
	outtextxy(346, 508, '0');

	if (ReTra == -1)
	{
		settextcolor(WHITE);
		RECT r1 = { 10,100 ,390,170 };
		settextstyle(60, 0, _T("微软雅黑"), 0, 0, 900, false, false, false);
		drawtext('0', &r1, DT_LEFT | DT_VCENTER | DT_SINGLELINE | DT_END_ELLIPSIS | DT_MODIFYSTRING);
	}
	else
	{
		settextcolor(WHITE);
		RECT r1 = { 10,100 ,390,170 };
		callen(Tra);	// 计算字符串长度
		drawtext(Tra, &r1, DT_LEFT | DT_VCENTER | DT_SINGLELINE | DT_END_ELLIPSIS | DT_MODIFYSTRING);
	}

	if (Button[1])	// 出现选择输入单位页面
	{
		IMAGE blacks = setimage(400, 250, RGB(0, 0, 0));	// 设置绘图

		my_putimage(0, 50, &blacks, 20, NULL, 1, 85, NULL);

		setlinecolor(HSLtoRGB(190, 1, 0.5));

		rectangle(0, 50, 399, 300);
		settextstyle(23, 0, _T("Consolas"), 0, 0, 20, false, false, false);
	
		for (int i = 0; i < lens; i++)
		{
			if (fly + 55 + 30 * i < 285 && fly + 55 + 30 * i > 50)
			{
				if (Tranumber == i)
				{
					setfillcolor(RGB(100,100,100));
					setfillstyle(BS_SOLID);
					solidrectangle(0, fly + 51 + 30 * i, 400, fly + 82 + 30 * i);
				}
				if (Button1[i]) settextcolor(HSLtoRGB(190, 1, 0.5));
				else  settextcolor(WHITE);

				if		(lens == sizeof(TraS) / sizeof(TraS[0]))		outtextxy(12, 55 + 30 * i + fly, TraS[i]);
				else if (lens == sizeof(TraC) / sizeof(TraC[0]))		outtextxy(12, 55 + 30 * i + fly, TraC[i]);
				else if (lens == sizeof(TraM) / sizeof(TraM[0]))		outtextxy(12, 55 + 30 * i + fly, TraM[i]);
				else if (lens == sizeof(TraT) / sizeof(TraT[0]))		outtextxy(12, 55 + 30 * i + fly, TraT[i]);
				else if (lens == sizeof(TraSH) / sizeof(TraSH[0]))		outtextxy(12, 55 + 30 * i + fly, TraSH[i]);
				else if (lens == sizeof(TraW) / sizeof(TraW[0]))		outtextxy(12, 55 + 30 * i + fly, TraW[i]);
				else if (lens == sizeof(TraSD) / sizeof(TraSD[0]))		outtextxy(12, 55 + 30 * i + fly, TraSD[i]);
				else if (lens == sizeof(TraZ) / sizeof(TraZ[0]))		outtextxy(12, 55 + 30 * i + fly, TraZ[i]);
				else if (lens == sizeof(TraN) / sizeof(TraN[0]))		outtextxy(12, 55 + 30 * i + fly, TraN[i]);
				else if (lens == sizeof(TraG) / sizeof(TraG[0]))		outtextxy(12, 55 + 30 * i + fly, TraG[i]);
				else if (lens == sizeof(TraY) / sizeof(TraY[0]))		outtextxy(12, 55 + 30 * i + fly, TraY[i]);
				else if (lens == sizeof(TraJ) / sizeof(TraJ[0]))		outtextxy(12, 55 + 30 * i + fly, TraJ[i]);
			}
		}
	}

	if (ReTra == -1)
	{
		settextcolor(WHITE);
		RECT r1 = { 10,300 ,390,370 };
		settextstyle(60, 0, _T("微软雅黑"), 0, 0, 900, false, false, false);
		drawtext('0', &r1, DT_LEFT | DT_VCENTER | DT_SINGLELINE | DT_END_ELLIPSIS | DT_MODIFYSTRING);
	}
	else
	{
		settextcolor(WHITE);
		RECT r1 = { 10,300 ,390,370 };
		callen2(TraEd);	// 计算字符串长度
		drawtext(TraEd, &r1, DT_LEFT | DT_VCENTER | DT_SINGLELINE | DT_END_ELLIPSIS | DT_MODIFYSTRING);
	}

	if (Button[3])	// 出现选择输出单位页面
	{
		IMAGE blacks = setimage(400, 250, RGB(0, 0, 0));	// 设置绘图
		my_putimage(0, 200, &blacks, 20, NULL, 1, 80, NULL);
		setlinecolor(HSLtoRGB(190, 1, 0.5));
		rectangle(0, 200, 399, 450);
		settextstyle(23, 0, _T("Consolas"), 0, 0, 20, false, false, false);
		for (int i = 0; i < lens; i++)
		{
			if (fly + 205 + 30 * i < 435 && fly + 205 + 30 * i>200)
			{
				if (Tranumber1 == i)
				{
					setfillcolor(RGB(100, 100, 100));
					setfillstyle(BS_SOLID);
					solidrectangle(0, fly + 201 + 30 * i, 400, fly + 232 + 30 * i);
				}
				if (Button1[i]) settextcolor(HSLtoRGB(190, 1, 0.5));
				else  settextcolor(WHITE);

				if		(lens == sizeof(TraS) / sizeof(TraS[0]))		outtextxy(12, 205 + 30 * i + fly, TraS[i]);
				else if (lens == sizeof(TraC) / sizeof(TraC[0]))		outtextxy(12, 205 + 30 * i + fly, TraC[i]);
				else if (lens == sizeof(TraM) / sizeof(TraM[0]))		outtextxy(12, 205 + 30 * i + fly, TraM[i]);
				else if (lens == sizeof(TraT) / sizeof(TraT[0]))		outtextxy(12, 205 + 30 * i + fly, TraT[i]);
				else if (lens == sizeof(TraSH) / sizeof(TraSH[0]))		outtextxy(12, 205 + 30 * i + fly, TraSH[i]);
				else if (lens == sizeof(TraW) / sizeof(TraW[0]))		outtextxy(12, 205 + 30 * i + fly, TraW[i]);
				else if (lens == sizeof(TraSD) / sizeof(TraSD[0]))		outtextxy(12, 205 + 30 * i + fly, TraSD[i]);
				else if (lens == sizeof(TraZ) / sizeof(TraZ[0]))		outtextxy(12, 205 + 30 * i + fly, TraZ[i]);
				else if (lens == sizeof(TraN) / sizeof(TraN[0]))		outtextxy(12, 205 + 30 * i + fly, TraN[i]);
				else if (lens == sizeof(TraG) / sizeof(TraG[0]))		outtextxy(12, 205 + 30 * i + fly, TraG[i]);
				else if (lens == sizeof(TraY) / sizeof(TraY[0]))		outtextxy(12, 205 + 30 * i + fly, TraY[i]);
				else if (lens == sizeof(TraJ) / sizeof(TraJ[0]))		outtextxy(12, 205 + 30 * i + fly, TraJ[i]);
			}
		}
	}
}


void Output1(MyChar Tra[][40], LPCTSTR s)
{
	setbkmode(TRANSPARENT);
	setfillstyle(BS_SOLID);
	changecolor(0, 400, 0, 600);

	IMAGE blacks = setimage(400, 600, RGB(0, 0, 0));	// 设置绘图
	my_putimage(0, 0, &blacks, RGB(255, 255, 255), 0, 1, 20, 0);

	settextcolor(WHITE);
	settextstyle(30, 0, _T("微软雅黑"), 0, 0, 900, 0, 0, 0);
	outtextxy(40, 10, s);

	if (help[0])settextcolor(RGB(0, 255, 255));
	else settextcolor(WHITE);
	settextstyle(30, 30, _T("微软雅黑"));
	outtextxy(0, 10, _T("≡"));
	settextstyle(50, 10, _T("微软雅黑"));

	settextcolor(WHITE);
	settextstyle(20, 0, _T("微软雅黑"), 0, 0, 20, false, false, false);
	outtextxy(30, 175, Tra[Tranumber]);
	if (Button[0])settextcolor(HSLtoRGB(190, 1, 0.5));
	else settextcolor(WHITE);
	outtextxy(10, 175, _T("▼"));

	settextcolor(WHITE);
	settextstyle(20, 0, _T("微软雅黑"), 0, 0, 20, false, false, false);
	outtextxy(30, 375, Tra[Tranumber1]);
	if (Button[2])settextcolor(HSLtoRGB(190, 1, 0.5));
	else settextcolor(WHITE);
	outtextxy(10, 375, _T("▼"));
}

void callen(MyChar *zfc)
{
	int k = (int)_tcslen(zfc);
	if (k <= 13)settextstyle(60, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 14)settextstyle(55, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 16)settextstyle(50, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 17)settextstyle(45, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else settextstyle(32, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
}

void callen1(MyChar *zfc)
{
	int k = (int)_tcslen(zfc);
	if (k <= 13)settextstyle(60, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 14)settextstyle(55, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 16)settextstyle(50, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 17)settextstyle(45, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 23)settextstyle(32, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 40)settextstyle(20, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else settextstyle(15, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
}

void callen2(MyChar *zfc)
{
	int k = (int)_tcslen(zfc);
	if (k <= 13)settextstyle(60, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 14)settextstyle(55, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 16)settextstyle(50, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 17)settextstyle(45, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 23)settextstyle(32, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else if (k <= 40)settextstyle(25, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
	else settextstyle(20, 0, _T("微软雅黑"), 0, 0, 900, false, false, false, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH);
}
